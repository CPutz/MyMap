// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace OSMPBF {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class Osmformat {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    #endregion
    #region Extensions
    internal static readonly object Descriptor;
    static Osmformat() {
      Descriptor = null;
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class HeaderBlock : pb::GeneratedMessageLite<HeaderBlock, HeaderBlock.Builder> {
    private HeaderBlock() { }
    private static readonly HeaderBlock defaultInstance = new HeaderBlock().MakeReadOnly();
    private static readonly string[] _headerBlockFieldNames = new string[] { "bbox", "optional_features", "required_features", "source", "writingprogram" };
    private static readonly uint[] _headerBlockFieldTags = new uint[] { 10, 42, 34, 138, 130 };
    public static HeaderBlock DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override HeaderBlock DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override HeaderBlock ThisMessage {
      get { return this; }
    }
    
    public const int BboxFieldNumber = 1;
    private bool hasBbox;
    private global::OSMPBF.HeaderBBox bbox_;
    public bool HasBbox {
      get { return hasBbox; }
    }
    public global::OSMPBF.HeaderBBox Bbox {
      get { return bbox_ ?? global::OSMPBF.HeaderBBox.DefaultInstance; }
    }
    
    public const int RequiredFeaturesFieldNumber = 4;
    private pbc::PopsicleList<string> requiredFeatures_ = new pbc::PopsicleList<string>();
    public scg::IList<string> RequiredFeaturesList {
      get { return pbc::Lists.AsReadOnly(requiredFeatures_); }
    }
    public int RequiredFeaturesCount {
      get { return requiredFeatures_.Count; }
    }
    public string GetRequiredFeatures(int index) {
      return requiredFeatures_[index];
    }
    
    public const int OptionalFeaturesFieldNumber = 5;
    private pbc::PopsicleList<string> optionalFeatures_ = new pbc::PopsicleList<string>();
    public scg::IList<string> OptionalFeaturesList {
      get { return pbc::Lists.AsReadOnly(optionalFeatures_); }
    }
    public int OptionalFeaturesCount {
      get { return optionalFeatures_.Count; }
    }
    public string GetOptionalFeatures(int index) {
      return optionalFeatures_[index];
    }
    
    public const int WritingprogramFieldNumber = 16;
    private bool hasWritingprogram;
    private string writingprogram_ = "";
    public bool HasWritingprogram {
      get { return hasWritingprogram; }
    }
    public string Writingprogram {
      get { return writingprogram_; }
    }
    
    public const int SourceFieldNumber = 17;
    private bool hasSource;
    private string source_ = "";
    public bool HasSource {
      get { return hasSource; }
    }
    public string Source {
      get { return source_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasBbox) {
          if (!Bbox.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _headerBlockFieldNames;
      if (hasBbox) {
        output.WriteMessage(1, field_names[0], Bbox);
      }
      if (requiredFeatures_.Count > 0) {
        output.WriteStringArray(4, field_names[2], requiredFeatures_);
      }
      if (optionalFeatures_.Count > 0) {
        output.WriteStringArray(5, field_names[1], optionalFeatures_);
      }
      if (hasWritingprogram) {
        output.WriteString(16, field_names[4], Writingprogram);
      }
      if (hasSource) {
        output.WriteString(17, field_names[3], Source);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBbox) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Bbox);
        }
        {
          int dataSize = 0;
          foreach (string element in RequiredFeaturesList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * requiredFeatures_.Count;
        }
        {
          int dataSize = 0;
          foreach (string element in OptionalFeaturesList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * optionalFeatures_.Count;
        }
        if (hasWritingprogram) {
          size += pb::CodedOutputStream.ComputeStringSize(16, Writingprogram);
        }
        if (hasSource) {
          size += pb::CodedOutputStream.ComputeStringSize(17, Source);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasBbox) hash ^= bbox_.GetHashCode();
      foreach(string i in requiredFeatures_)
        hash ^= i.GetHashCode();
      foreach(string i in optionalFeatures_)
        hash ^= i.GetHashCode();
      if (hasWritingprogram) hash ^= writingprogram_.GetHashCode();
      if (hasSource) hash ^= source_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      HeaderBlock other = obj as HeaderBlock;
      if (other == null) return false;
      if (hasBbox != other.hasBbox || (hasBbox && !bbox_.Equals(other.bbox_))) return false;
      if(requiredFeatures_.Count != other.requiredFeatures_.Count) return false;
      for(int ix=0; ix < requiredFeatures_.Count; ix++)
        if(!requiredFeatures_[ix].Equals(other.requiredFeatures_[ix])) return false;
      if(optionalFeatures_.Count != other.optionalFeatures_.Count) return false;
      for(int ix=0; ix < optionalFeatures_.Count; ix++)
        if(!optionalFeatures_[ix].Equals(other.optionalFeatures_[ix])) return false;
      if (hasWritingprogram != other.hasWritingprogram || (hasWritingprogram && !writingprogram_.Equals(other.writingprogram_))) return false;
      if (hasSource != other.hasSource || (hasSource && !source_.Equals(other.source_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("bbox", hasBbox, bbox_, writer);
      PrintField("required_features", requiredFeatures_, writer);
      PrintField("optional_features", optionalFeatures_, writer);
      PrintField("writingprogram", hasWritingprogram, writingprogram_, writer);
      PrintField("source", hasSource, source_, writer);
    }
    #endregion
    
    public static HeaderBlock ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeaderBlock ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeaderBlock ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeaderBlock ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeaderBlock ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeaderBlock ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static HeaderBlock ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static HeaderBlock ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static HeaderBlock ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeaderBlock ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private HeaderBlock MakeReadOnly() {
      requiredFeatures_.MakeReadOnly();
      optionalFeatures_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(HeaderBlock prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<HeaderBlock, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(HeaderBlock cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private HeaderBlock result;
      
      private HeaderBlock PrepareBuilder() {
        if (resultIsReadOnly) {
          HeaderBlock original = result;
          result = new HeaderBlock();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override HeaderBlock MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override HeaderBlock DefaultInstanceForType {
        get { return global::OSMPBF.HeaderBlock.DefaultInstance; }
      }
      
      public override HeaderBlock BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is HeaderBlock) {
          return MergeFrom((HeaderBlock) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(HeaderBlock other) {
        if (other == global::OSMPBF.HeaderBlock.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBbox) {
          MergeBbox(other.Bbox);
        }
        if (other.requiredFeatures_.Count != 0) {
          result.requiredFeatures_.Add(other.requiredFeatures_);
        }
        if (other.optionalFeatures_.Count != 0) {
          result.optionalFeatures_.Add(other.optionalFeatures_);
        }
        if (other.HasWritingprogram) {
          Writingprogram = other.Writingprogram;
        }
        if (other.HasSource) {
          Source = other.Source;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_headerBlockFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _headerBlockFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::OSMPBF.HeaderBBox.Builder subBuilder = global::OSMPBF.HeaderBBox.CreateBuilder();
              if (result.hasBbox) {
                subBuilder.MergeFrom(Bbox);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Bbox = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              input.ReadStringArray(tag, field_name, result.requiredFeatures_);
              break;
            }
            case 42: {
              input.ReadStringArray(tag, field_name, result.optionalFeatures_);
              break;
            }
            case 130: {
              result.hasWritingprogram = input.ReadString(ref result.writingprogram_);
              break;
            }
            case 138: {
              result.hasSource = input.ReadString(ref result.source_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasBbox {
       get { return result.hasBbox; }
      }
      public global::OSMPBF.HeaderBBox Bbox {
        get { return result.Bbox; }
        set { SetBbox(value); }
      }
      public Builder SetBbox(global::OSMPBF.HeaderBBox value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBbox = true;
        result.bbox_ = value;
        return this;
      }
      public Builder SetBbox(global::OSMPBF.HeaderBBox.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBbox = true;
        result.bbox_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBbox(global::OSMPBF.HeaderBBox value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBbox &&
            result.bbox_ != global::OSMPBF.HeaderBBox.DefaultInstance) {
            result.bbox_ = global::OSMPBF.HeaderBBox.CreateBuilder(result.bbox_).MergeFrom(value).BuildPartial();
        } else {
          result.bbox_ = value;
        }
        result.hasBbox = true;
        return this;
      }
      public Builder ClearBbox() {
        PrepareBuilder();
        result.hasBbox = false;
        result.bbox_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<string> RequiredFeaturesList {
        get { return PrepareBuilder().requiredFeatures_; }
      }
      public int RequiredFeaturesCount {
        get { return result.RequiredFeaturesCount; }
      }
      public string GetRequiredFeatures(int index) {
        return result.GetRequiredFeatures(index);
      }
      public Builder SetRequiredFeatures(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.requiredFeatures_[index] = value;
        return this;
      }
      public Builder AddRequiredFeatures(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.requiredFeatures_.Add(value);
        return this;
      }
      public Builder AddRangeRequiredFeatures(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.requiredFeatures_.Add(values);
        return this;
      }
      public Builder ClearRequiredFeatures() {
        PrepareBuilder();
        result.requiredFeatures_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> OptionalFeaturesList {
        get { return PrepareBuilder().optionalFeatures_; }
      }
      public int OptionalFeaturesCount {
        get { return result.OptionalFeaturesCount; }
      }
      public string GetOptionalFeatures(int index) {
        return result.GetOptionalFeatures(index);
      }
      public Builder SetOptionalFeatures(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.optionalFeatures_[index] = value;
        return this;
      }
      public Builder AddOptionalFeatures(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.optionalFeatures_.Add(value);
        return this;
      }
      public Builder AddRangeOptionalFeatures(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.optionalFeatures_.Add(values);
        return this;
      }
      public Builder ClearOptionalFeatures() {
        PrepareBuilder();
        result.optionalFeatures_.Clear();
        return this;
      }
      
      public bool HasWritingprogram {
        get { return result.hasWritingprogram; }
      }
      public string Writingprogram {
        get { return result.Writingprogram; }
        set { SetWritingprogram(value); }
      }
      public Builder SetWritingprogram(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWritingprogram = true;
        result.writingprogram_ = value;
        return this;
      }
      public Builder ClearWritingprogram() {
        PrepareBuilder();
        result.hasWritingprogram = false;
        result.writingprogram_ = "";
        return this;
      }
      
      public bool HasSource {
        get { return result.hasSource; }
      }
      public string Source {
        get { return result.Source; }
        set { SetSource(value); }
      }
      public Builder SetSource(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSource = true;
        result.source_ = value;
        return this;
      }
      public Builder ClearSource() {
        PrepareBuilder();
        result.hasSource = false;
        result.source_ = "";
        return this;
      }
    }
    static HeaderBlock() {
      object.ReferenceEquals(global::OSMPBF.Osmformat.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class HeaderBBox : pb::GeneratedMessageLite<HeaderBBox, HeaderBBox.Builder> {
    private HeaderBBox() { }
    private static readonly HeaderBBox defaultInstance = new HeaderBBox().MakeReadOnly();
    private static readonly string[] _headerBBoxFieldNames = new string[] { "bottom", "left", "right", "top" };
    private static readonly uint[] _headerBBoxFieldTags = new uint[] { 32, 8, 16, 24 };
    public static HeaderBBox DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override HeaderBBox DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override HeaderBBox ThisMessage {
      get { return this; }
    }
    
    public const int LeftFieldNumber = 1;
    private bool hasLeft;
    private long left_;
    public bool HasLeft {
      get { return hasLeft; }
    }
    public long Left {
      get { return left_; }
    }
    
    public const int RightFieldNumber = 2;
    private bool hasRight;
    private long right_;
    public bool HasRight {
      get { return hasRight; }
    }
    public long Right {
      get { return right_; }
    }
    
    public const int TopFieldNumber = 3;
    private bool hasTop;
    private long top_;
    public bool HasTop {
      get { return hasTop; }
    }
    public long Top {
      get { return top_; }
    }
    
    public const int BottomFieldNumber = 4;
    private bool hasBottom;
    private long bottom_;
    public bool HasBottom {
      get { return hasBottom; }
    }
    public long Bottom {
      get { return bottom_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLeft) return false;
        if (!hasRight) return false;
        if (!hasTop) return false;
        if (!hasBottom) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _headerBBoxFieldNames;
      if (hasLeft) {
        output.WriteSInt64(1, field_names[1], Left);
      }
      if (hasRight) {
        output.WriteSInt64(2, field_names[2], Right);
      }
      if (hasTop) {
        output.WriteSInt64(3, field_names[3], Top);
      }
      if (hasBottom) {
        output.WriteSInt64(4, field_names[0], Bottom);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasLeft) {
          size += pb::CodedOutputStream.ComputeSInt64Size(1, Left);
        }
        if (hasRight) {
          size += pb::CodedOutputStream.ComputeSInt64Size(2, Right);
        }
        if (hasTop) {
          size += pb::CodedOutputStream.ComputeSInt64Size(3, Top);
        }
        if (hasBottom) {
          size += pb::CodedOutputStream.ComputeSInt64Size(4, Bottom);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasLeft) hash ^= left_.GetHashCode();
      if (hasRight) hash ^= right_.GetHashCode();
      if (hasTop) hash ^= top_.GetHashCode();
      if (hasBottom) hash ^= bottom_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      HeaderBBox other = obj as HeaderBBox;
      if (other == null) return false;
      if (hasLeft != other.hasLeft || (hasLeft && !left_.Equals(other.left_))) return false;
      if (hasRight != other.hasRight || (hasRight && !right_.Equals(other.right_))) return false;
      if (hasTop != other.hasTop || (hasTop && !top_.Equals(other.top_))) return false;
      if (hasBottom != other.hasBottom || (hasBottom && !bottom_.Equals(other.bottom_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("left", hasLeft, left_, writer);
      PrintField("right", hasRight, right_, writer);
      PrintField("top", hasTop, top_, writer);
      PrintField("bottom", hasBottom, bottom_, writer);
    }
    #endregion
    
    public static HeaderBBox ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeaderBBox ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeaderBBox ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeaderBBox ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeaderBBox ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeaderBBox ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static HeaderBBox ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static HeaderBBox ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static HeaderBBox ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeaderBBox ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private HeaderBBox MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(HeaderBBox prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<HeaderBBox, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(HeaderBBox cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private HeaderBBox result;
      
      private HeaderBBox PrepareBuilder() {
        if (resultIsReadOnly) {
          HeaderBBox original = result;
          result = new HeaderBBox();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override HeaderBBox MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override HeaderBBox DefaultInstanceForType {
        get { return global::OSMPBF.HeaderBBox.DefaultInstance; }
      }
      
      public override HeaderBBox BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is HeaderBBox) {
          return MergeFrom((HeaderBBox) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(HeaderBBox other) {
        if (other == global::OSMPBF.HeaderBBox.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLeft) {
          Left = other.Left;
        }
        if (other.HasRight) {
          Right = other.Right;
        }
        if (other.HasTop) {
          Top = other.Top;
        }
        if (other.HasBottom) {
          Bottom = other.Bottom;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_headerBBoxFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _headerBBoxFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasLeft = input.ReadSInt64(ref result.left_);
              break;
            }
            case 16: {
              result.hasRight = input.ReadSInt64(ref result.right_);
              break;
            }
            case 24: {
              result.hasTop = input.ReadSInt64(ref result.top_);
              break;
            }
            case 32: {
              result.hasBottom = input.ReadSInt64(ref result.bottom_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasLeft {
        get { return result.hasLeft; }
      }
      public long Left {
        get { return result.Left; }
        set { SetLeft(value); }
      }
      public Builder SetLeft(long value) {
        PrepareBuilder();
        result.hasLeft = true;
        result.left_ = value;
        return this;
      }
      public Builder ClearLeft() {
        PrepareBuilder();
        result.hasLeft = false;
        result.left_ = 0;
        return this;
      }
      
      public bool HasRight {
        get { return result.hasRight; }
      }
      public long Right {
        get { return result.Right; }
        set { SetRight(value); }
      }
      public Builder SetRight(long value) {
        PrepareBuilder();
        result.hasRight = true;
        result.right_ = value;
        return this;
      }
      public Builder ClearRight() {
        PrepareBuilder();
        result.hasRight = false;
        result.right_ = 0;
        return this;
      }
      
      public bool HasTop {
        get { return result.hasTop; }
      }
      public long Top {
        get { return result.Top; }
        set { SetTop(value); }
      }
      public Builder SetTop(long value) {
        PrepareBuilder();
        result.hasTop = true;
        result.top_ = value;
        return this;
      }
      public Builder ClearTop() {
        PrepareBuilder();
        result.hasTop = false;
        result.top_ = 0;
        return this;
      }
      
      public bool HasBottom {
        get { return result.hasBottom; }
      }
      public long Bottom {
        get { return result.Bottom; }
        set { SetBottom(value); }
      }
      public Builder SetBottom(long value) {
        PrepareBuilder();
        result.hasBottom = true;
        result.bottom_ = value;
        return this;
      }
      public Builder ClearBottom() {
        PrepareBuilder();
        result.hasBottom = false;
        result.bottom_ = 0;
        return this;
      }
    }
    static HeaderBBox() {
      object.ReferenceEquals(global::OSMPBF.Osmformat.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class PrimitiveBlock : pb::GeneratedMessageLite<PrimitiveBlock, PrimitiveBlock.Builder> {
    private PrimitiveBlock() { }
    private static readonly PrimitiveBlock defaultInstance = new PrimitiveBlock().MakeReadOnly();
    private static readonly string[] _primitiveBlockFieldNames = new string[] { "date_granularity", "granularity", "lat_offset", "lon_offset", "primitivegroup", "stringtable" };
    private static readonly uint[] _primitiveBlockFieldTags = new uint[] { 144, 136, 152, 160, 18, 10 };
    public static PrimitiveBlock DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PrimitiveBlock DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PrimitiveBlock ThisMessage {
      get { return this; }
    }
    
    public const int StringtableFieldNumber = 1;
    private bool hasStringtable;
    private global::OSMPBF.StringTable stringtable_;
    public bool HasStringtable {
      get { return hasStringtable; }
    }
    public global::OSMPBF.StringTable Stringtable {
      get { return stringtable_ ?? global::OSMPBF.StringTable.DefaultInstance; }
    }
    
    public const int PrimitivegroupFieldNumber = 2;
    private pbc::PopsicleList<global::OSMPBF.PrimitiveGroup> primitivegroup_ = new pbc::PopsicleList<global::OSMPBF.PrimitiveGroup>();
    public scg::IList<global::OSMPBF.PrimitiveGroup> PrimitivegroupList {
      get { return primitivegroup_; }
    }
    public int PrimitivegroupCount {
      get { return primitivegroup_.Count; }
    }
    public global::OSMPBF.PrimitiveGroup GetPrimitivegroup(int index) {
      return primitivegroup_[index];
    }
    
    public const int GranularityFieldNumber = 17;
    private bool hasGranularity;
    private int granularity_ = 100;
    public bool HasGranularity {
      get { return hasGranularity; }
    }
    public int Granularity {
      get { return granularity_; }
    }
    
    public const int LatOffsetFieldNumber = 19;
    private bool hasLatOffset;
    private long latOffset_;
    public bool HasLatOffset {
      get { return hasLatOffset; }
    }
    public long LatOffset {
      get { return latOffset_; }
    }
    
    public const int LonOffsetFieldNumber = 20;
    private bool hasLonOffset;
    private long lonOffset_;
    public bool HasLonOffset {
      get { return hasLonOffset; }
    }
    public long LonOffset {
      get { return lonOffset_; }
    }
    
    public const int DateGranularityFieldNumber = 18;
    private bool hasDateGranularity;
    private int dateGranularity_ = 1000;
    public bool HasDateGranularity {
      get { return hasDateGranularity; }
    }
    public int DateGranularity {
      get { return dateGranularity_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasStringtable) return false;
        foreach (global::OSMPBF.PrimitiveGroup element in PrimitivegroupList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _primitiveBlockFieldNames;
      if (hasStringtable) {
        output.WriteMessage(1, field_names[5], Stringtable);
      }
      if (primitivegroup_.Count > 0) {
        output.WriteMessageArray(2, field_names[4], primitivegroup_);
      }
      if (hasGranularity) {
        output.WriteInt32(17, field_names[1], Granularity);
      }
      if (hasDateGranularity) {
        output.WriteInt32(18, field_names[0], DateGranularity);
      }
      if (hasLatOffset) {
        output.WriteInt64(19, field_names[2], LatOffset);
      }
      if (hasLonOffset) {
        output.WriteInt64(20, field_names[3], LonOffset);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasStringtable) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Stringtable);
        }
        foreach (global::OSMPBF.PrimitiveGroup element in PrimitivegroupList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        if (hasGranularity) {
          size += pb::CodedOutputStream.ComputeInt32Size(17, Granularity);
        }
        if (hasLatOffset) {
          size += pb::CodedOutputStream.ComputeInt64Size(19, LatOffset);
        }
        if (hasLonOffset) {
          size += pb::CodedOutputStream.ComputeInt64Size(20, LonOffset);
        }
        if (hasDateGranularity) {
          size += pb::CodedOutputStream.ComputeInt32Size(18, DateGranularity);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasStringtable) hash ^= stringtable_.GetHashCode();
      foreach(global::OSMPBF.PrimitiveGroup i in primitivegroup_)
        hash ^= i.GetHashCode();
      if (hasGranularity) hash ^= granularity_.GetHashCode();
      if (hasLatOffset) hash ^= latOffset_.GetHashCode();
      if (hasLonOffset) hash ^= lonOffset_.GetHashCode();
      if (hasDateGranularity) hash ^= dateGranularity_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PrimitiveBlock other = obj as PrimitiveBlock;
      if (other == null) return false;
      if (hasStringtable != other.hasStringtable || (hasStringtable && !stringtable_.Equals(other.stringtable_))) return false;
      if(primitivegroup_.Count != other.primitivegroup_.Count) return false;
      for(int ix=0; ix < primitivegroup_.Count; ix++)
        if(!primitivegroup_[ix].Equals(other.primitivegroup_[ix])) return false;
      if (hasGranularity != other.hasGranularity || (hasGranularity && !granularity_.Equals(other.granularity_))) return false;
      if (hasLatOffset != other.hasLatOffset || (hasLatOffset && !latOffset_.Equals(other.latOffset_))) return false;
      if (hasLonOffset != other.hasLonOffset || (hasLonOffset && !lonOffset_.Equals(other.lonOffset_))) return false;
      if (hasDateGranularity != other.hasDateGranularity || (hasDateGranularity && !dateGranularity_.Equals(other.dateGranularity_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("stringtable", hasStringtable, stringtable_, writer);
      PrintField("primitivegroup", primitivegroup_, writer);
      PrintField("granularity", hasGranularity, granularity_, writer);
      PrintField("date_granularity", hasDateGranularity, dateGranularity_, writer);
      PrintField("lat_offset", hasLatOffset, latOffset_, writer);
      PrintField("lon_offset", hasLonOffset, lonOffset_, writer);
    }
    #endregion
    
    public static PrimitiveBlock ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PrimitiveBlock ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PrimitiveBlock ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PrimitiveBlock ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PrimitiveBlock ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PrimitiveBlock ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PrimitiveBlock ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PrimitiveBlock ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PrimitiveBlock ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PrimitiveBlock ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PrimitiveBlock MakeReadOnly() {
      primitivegroup_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PrimitiveBlock prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<PrimitiveBlock, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PrimitiveBlock cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PrimitiveBlock result;
      
      private PrimitiveBlock PrepareBuilder() {
        if (resultIsReadOnly) {
          PrimitiveBlock original = result;
          result = new PrimitiveBlock();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PrimitiveBlock MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PrimitiveBlock DefaultInstanceForType {
        get { return global::OSMPBF.PrimitiveBlock.DefaultInstance; }
      }
      
      public override PrimitiveBlock BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PrimitiveBlock) {
          return MergeFrom((PrimitiveBlock) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PrimitiveBlock other) {
        if (other == global::OSMPBF.PrimitiveBlock.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStringtable) {
          MergeStringtable(other.Stringtable);
        }
        if (other.primitivegroup_.Count != 0) {
          result.primitivegroup_.Add(other.primitivegroup_);
        }
        if (other.HasGranularity) {
          Granularity = other.Granularity;
        }
        if (other.HasLatOffset) {
          LatOffset = other.LatOffset;
        }
        if (other.HasLonOffset) {
          LonOffset = other.LonOffset;
        }
        if (other.HasDateGranularity) {
          DateGranularity = other.DateGranularity;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_primitiveBlockFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _primitiveBlockFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::OSMPBF.StringTable.Builder subBuilder = global::OSMPBF.StringTable.CreateBuilder();
              if (result.hasStringtable) {
                subBuilder.MergeFrom(Stringtable);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Stringtable = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.primitivegroup_, global::OSMPBF.PrimitiveGroup.DefaultInstance, extensionRegistry);
              break;
            }
            case 136: {
              result.hasGranularity = input.ReadInt32(ref result.granularity_);
              break;
            }
            case 144: {
              result.hasDateGranularity = input.ReadInt32(ref result.dateGranularity_);
              break;
            }
            case 152: {
              result.hasLatOffset = input.ReadInt64(ref result.latOffset_);
              break;
            }
            case 160: {
              result.hasLonOffset = input.ReadInt64(ref result.lonOffset_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasStringtable {
       get { return result.hasStringtable; }
      }
      public global::OSMPBF.StringTable Stringtable {
        get { return result.Stringtable; }
        set { SetStringtable(value); }
      }
      public Builder SetStringtable(global::OSMPBF.StringTable value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStringtable = true;
        result.stringtable_ = value;
        return this;
      }
      public Builder SetStringtable(global::OSMPBF.StringTable.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStringtable = true;
        result.stringtable_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStringtable(global::OSMPBF.StringTable value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStringtable &&
            result.stringtable_ != global::OSMPBF.StringTable.DefaultInstance) {
            result.stringtable_ = global::OSMPBF.StringTable.CreateBuilder(result.stringtable_).MergeFrom(value).BuildPartial();
        } else {
          result.stringtable_ = value;
        }
        result.hasStringtable = true;
        return this;
      }
      public Builder ClearStringtable() {
        PrepareBuilder();
        result.hasStringtable = false;
        result.stringtable_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::OSMPBF.PrimitiveGroup> PrimitivegroupList {
        get { return PrepareBuilder().primitivegroup_; }
      }
      public int PrimitivegroupCount {
        get { return result.PrimitivegroupCount; }
      }
      public global::OSMPBF.PrimitiveGroup GetPrimitivegroup(int index) {
        return result.GetPrimitivegroup(index);
      }
      public Builder SetPrimitivegroup(int index, global::OSMPBF.PrimitiveGroup value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.primitivegroup_[index] = value;
        return this;
      }
      public Builder SetPrimitivegroup(int index, global::OSMPBF.PrimitiveGroup.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.primitivegroup_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPrimitivegroup(global::OSMPBF.PrimitiveGroup value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.primitivegroup_.Add(value);
        return this;
      }
      public Builder AddPrimitivegroup(global::OSMPBF.PrimitiveGroup.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.primitivegroup_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePrimitivegroup(scg::IEnumerable<global::OSMPBF.PrimitiveGroup> values) {
        PrepareBuilder();
        result.primitivegroup_.Add(values);
        return this;
      }
      public Builder ClearPrimitivegroup() {
        PrepareBuilder();
        result.primitivegroup_.Clear();
        return this;
      }
      
      public bool HasGranularity {
        get { return result.hasGranularity; }
      }
      public int Granularity {
        get { return result.Granularity; }
        set { SetGranularity(value); }
      }
      public Builder SetGranularity(int value) {
        PrepareBuilder();
        result.hasGranularity = true;
        result.granularity_ = value;
        return this;
      }
      public Builder ClearGranularity() {
        PrepareBuilder();
        result.hasGranularity = false;
        result.granularity_ = 100;
        return this;
      }
      
      public bool HasLatOffset {
        get { return result.hasLatOffset; }
      }
      public long LatOffset {
        get { return result.LatOffset; }
        set { SetLatOffset(value); }
      }
      public Builder SetLatOffset(long value) {
        PrepareBuilder();
        result.hasLatOffset = true;
        result.latOffset_ = value;
        return this;
      }
      public Builder ClearLatOffset() {
        PrepareBuilder();
        result.hasLatOffset = false;
        result.latOffset_ = 0L;
        return this;
      }
      
      public bool HasLonOffset {
        get { return result.hasLonOffset; }
      }
      public long LonOffset {
        get { return result.LonOffset; }
        set { SetLonOffset(value); }
      }
      public Builder SetLonOffset(long value) {
        PrepareBuilder();
        result.hasLonOffset = true;
        result.lonOffset_ = value;
        return this;
      }
      public Builder ClearLonOffset() {
        PrepareBuilder();
        result.hasLonOffset = false;
        result.lonOffset_ = 0L;
        return this;
      }
      
      public bool HasDateGranularity {
        get { return result.hasDateGranularity; }
      }
      public int DateGranularity {
        get { return result.DateGranularity; }
        set { SetDateGranularity(value); }
      }
      public Builder SetDateGranularity(int value) {
        PrepareBuilder();
        result.hasDateGranularity = true;
        result.dateGranularity_ = value;
        return this;
      }
      public Builder ClearDateGranularity() {
        PrepareBuilder();
        result.hasDateGranularity = false;
        result.dateGranularity_ = 1000;
        return this;
      }
    }
    static PrimitiveBlock() {
      object.ReferenceEquals(global::OSMPBF.Osmformat.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class PrimitiveGroup : pb::GeneratedMessageLite<PrimitiveGroup, PrimitiveGroup.Builder> {
    private PrimitiveGroup() { }
    private static readonly PrimitiveGroup defaultInstance = new PrimitiveGroup().MakeReadOnly();
    private static readonly string[] _primitiveGroupFieldNames = new string[] { "changesets", "dense", "nodes", "relations", "ways" };
    private static readonly uint[] _primitiveGroupFieldTags = new uint[] { 42, 18, 10, 34, 26 };
    public static PrimitiveGroup DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PrimitiveGroup DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PrimitiveGroup ThisMessage {
      get { return this; }
    }
    
    public const int NodesFieldNumber = 1;
    private pbc::PopsicleList<global::OSMPBF.Node> nodes_ = new pbc::PopsicleList<global::OSMPBF.Node>();
    public scg::IList<global::OSMPBF.Node> NodesList {
      get { return nodes_; }
    }
    public int NodesCount {
      get { return nodes_.Count; }
    }
    public global::OSMPBF.Node GetNodes(int index) {
      return nodes_[index];
    }
    
    public const int DenseFieldNumber = 2;
    private bool hasDense;
    private global::OSMPBF.DenseNodes dense_;
    public bool HasDense {
      get { return hasDense; }
    }
    public global::OSMPBF.DenseNodes Dense {
      get { return dense_ ?? global::OSMPBF.DenseNodes.DefaultInstance; }
    }
    
    public const int WaysFieldNumber = 3;
    private pbc::PopsicleList<global::OSMPBF.Way> ways_ = new pbc::PopsicleList<global::OSMPBF.Way>();
    public scg::IList<global::OSMPBF.Way> WaysList {
      get { return ways_; }
    }
    public int WaysCount {
      get { return ways_.Count; }
    }
    public global::OSMPBF.Way GetWays(int index) {
      return ways_[index];
    }
    
    public const int RelationsFieldNumber = 4;
    private pbc::PopsicleList<global::OSMPBF.Relation> relations_ = new pbc::PopsicleList<global::OSMPBF.Relation>();
    public scg::IList<global::OSMPBF.Relation> RelationsList {
      get { return relations_; }
    }
    public int RelationsCount {
      get { return relations_.Count; }
    }
    public global::OSMPBF.Relation GetRelations(int index) {
      return relations_[index];
    }
    
    public const int ChangesetsFieldNumber = 5;
    private pbc::PopsicleList<global::OSMPBF.ChangeSet> changesets_ = new pbc::PopsicleList<global::OSMPBF.ChangeSet>();
    public scg::IList<global::OSMPBF.ChangeSet> ChangesetsList {
      get { return changesets_; }
    }
    public int ChangesetsCount {
      get { return changesets_.Count; }
    }
    public global::OSMPBF.ChangeSet GetChangesets(int index) {
      return changesets_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::OSMPBF.Node element in NodesList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::OSMPBF.Way element in WaysList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::OSMPBF.Relation element in RelationsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::OSMPBF.ChangeSet element in ChangesetsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _primitiveGroupFieldNames;
      if (nodes_.Count > 0) {
        output.WriteMessageArray(1, field_names[2], nodes_);
      }
      if (hasDense) {
        output.WriteMessage(2, field_names[1], Dense);
      }
      if (ways_.Count > 0) {
        output.WriteMessageArray(3, field_names[4], ways_);
      }
      if (relations_.Count > 0) {
        output.WriteMessageArray(4, field_names[3], relations_);
      }
      if (changesets_.Count > 0) {
        output.WriteMessageArray(5, field_names[0], changesets_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::OSMPBF.Node element in NodesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        if (hasDense) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Dense);
        }
        foreach (global::OSMPBF.Way element in WaysList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        foreach (global::OSMPBF.Relation element in RelationsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        foreach (global::OSMPBF.ChangeSet element in ChangesetsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      foreach(global::OSMPBF.Node i in nodes_)
        hash ^= i.GetHashCode();
      if (hasDense) hash ^= dense_.GetHashCode();
      foreach(global::OSMPBF.Way i in ways_)
        hash ^= i.GetHashCode();
      foreach(global::OSMPBF.Relation i in relations_)
        hash ^= i.GetHashCode();
      foreach(global::OSMPBF.ChangeSet i in changesets_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PrimitiveGroup other = obj as PrimitiveGroup;
      if (other == null) return false;
      if(nodes_.Count != other.nodes_.Count) return false;
      for(int ix=0; ix < nodes_.Count; ix++)
        if(!nodes_[ix].Equals(other.nodes_[ix])) return false;
      if (hasDense != other.hasDense || (hasDense && !dense_.Equals(other.dense_))) return false;
      if(ways_.Count != other.ways_.Count) return false;
      for(int ix=0; ix < ways_.Count; ix++)
        if(!ways_[ix].Equals(other.ways_[ix])) return false;
      if(relations_.Count != other.relations_.Count) return false;
      for(int ix=0; ix < relations_.Count; ix++)
        if(!relations_[ix].Equals(other.relations_[ix])) return false;
      if(changesets_.Count != other.changesets_.Count) return false;
      for(int ix=0; ix < changesets_.Count; ix++)
        if(!changesets_[ix].Equals(other.changesets_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("nodes", nodes_, writer);
      PrintField("dense", hasDense, dense_, writer);
      PrintField("ways", ways_, writer);
      PrintField("relations", relations_, writer);
      PrintField("changesets", changesets_, writer);
    }
    #endregion
    
    public static PrimitiveGroup ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PrimitiveGroup ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PrimitiveGroup ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PrimitiveGroup ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PrimitiveGroup ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PrimitiveGroup ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PrimitiveGroup ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PrimitiveGroup ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PrimitiveGroup ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PrimitiveGroup ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PrimitiveGroup MakeReadOnly() {
      nodes_.MakeReadOnly();
      ways_.MakeReadOnly();
      relations_.MakeReadOnly();
      changesets_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PrimitiveGroup prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<PrimitiveGroup, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PrimitiveGroup cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PrimitiveGroup result;
      
      private PrimitiveGroup PrepareBuilder() {
        if (resultIsReadOnly) {
          PrimitiveGroup original = result;
          result = new PrimitiveGroup();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PrimitiveGroup MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PrimitiveGroup DefaultInstanceForType {
        get { return global::OSMPBF.PrimitiveGroup.DefaultInstance; }
      }
      
      public override PrimitiveGroup BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PrimitiveGroup) {
          return MergeFrom((PrimitiveGroup) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PrimitiveGroup other) {
        if (other == global::OSMPBF.PrimitiveGroup.DefaultInstance) return this;
        PrepareBuilder();
        if (other.nodes_.Count != 0) {
          result.nodes_.Add(other.nodes_);
        }
        if (other.HasDense) {
          MergeDense(other.Dense);
        }
        if (other.ways_.Count != 0) {
          result.ways_.Add(other.ways_);
        }
        if (other.relations_.Count != 0) {
          result.relations_.Add(other.relations_);
        }
        if (other.changesets_.Count != 0) {
          result.changesets_.Add(other.changesets_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_primitiveGroupFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _primitiveGroupFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.nodes_, global::OSMPBF.Node.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              global::OSMPBF.DenseNodes.Builder subBuilder = global::OSMPBF.DenseNodes.CreateBuilder();
              if (result.hasDense) {
                subBuilder.MergeFrom(Dense);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Dense = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.ways_, global::OSMPBF.Way.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.relations_, global::OSMPBF.Relation.DefaultInstance, extensionRegistry);
              break;
            }
            case 42: {
              input.ReadMessageArray(tag, field_name, result.changesets_, global::OSMPBF.ChangeSet.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public pbc::IPopsicleList<global::OSMPBF.Node> NodesList {
        get { return PrepareBuilder().nodes_; }
      }
      public int NodesCount {
        get { return result.NodesCount; }
      }
      public global::OSMPBF.Node GetNodes(int index) {
        return result.GetNodes(index);
      }
      public Builder SetNodes(int index, global::OSMPBF.Node value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.nodes_[index] = value;
        return this;
      }
      public Builder SetNodes(int index, global::OSMPBF.Node.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.nodes_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddNodes(global::OSMPBF.Node value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.nodes_.Add(value);
        return this;
      }
      public Builder AddNodes(global::OSMPBF.Node.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.nodes_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeNodes(scg::IEnumerable<global::OSMPBF.Node> values) {
        PrepareBuilder();
        result.nodes_.Add(values);
        return this;
      }
      public Builder ClearNodes() {
        PrepareBuilder();
        result.nodes_.Clear();
        return this;
      }
      
      public bool HasDense {
       get { return result.hasDense; }
      }
      public global::OSMPBF.DenseNodes Dense {
        get { return result.Dense; }
        set { SetDense(value); }
      }
      public Builder SetDense(global::OSMPBF.DenseNodes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDense = true;
        result.dense_ = value;
        return this;
      }
      public Builder SetDense(global::OSMPBF.DenseNodes.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDense = true;
        result.dense_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDense(global::OSMPBF.DenseNodes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDense &&
            result.dense_ != global::OSMPBF.DenseNodes.DefaultInstance) {
            result.dense_ = global::OSMPBF.DenseNodes.CreateBuilder(result.dense_).MergeFrom(value).BuildPartial();
        } else {
          result.dense_ = value;
        }
        result.hasDense = true;
        return this;
      }
      public Builder ClearDense() {
        PrepareBuilder();
        result.hasDense = false;
        result.dense_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::OSMPBF.Way> WaysList {
        get { return PrepareBuilder().ways_; }
      }
      public int WaysCount {
        get { return result.WaysCount; }
      }
      public global::OSMPBF.Way GetWays(int index) {
        return result.GetWays(index);
      }
      public Builder SetWays(int index, global::OSMPBF.Way value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ways_[index] = value;
        return this;
      }
      public Builder SetWays(int index, global::OSMPBF.Way.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ways_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddWays(global::OSMPBF.Way value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ways_.Add(value);
        return this;
      }
      public Builder AddWays(global::OSMPBF.Way.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ways_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeWays(scg::IEnumerable<global::OSMPBF.Way> values) {
        PrepareBuilder();
        result.ways_.Add(values);
        return this;
      }
      public Builder ClearWays() {
        PrepareBuilder();
        result.ways_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::OSMPBF.Relation> RelationsList {
        get { return PrepareBuilder().relations_; }
      }
      public int RelationsCount {
        get { return result.RelationsCount; }
      }
      public global::OSMPBF.Relation GetRelations(int index) {
        return result.GetRelations(index);
      }
      public Builder SetRelations(int index, global::OSMPBF.Relation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.relations_[index] = value;
        return this;
      }
      public Builder SetRelations(int index, global::OSMPBF.Relation.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.relations_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddRelations(global::OSMPBF.Relation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.relations_.Add(value);
        return this;
      }
      public Builder AddRelations(global::OSMPBF.Relation.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.relations_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeRelations(scg::IEnumerable<global::OSMPBF.Relation> values) {
        PrepareBuilder();
        result.relations_.Add(values);
        return this;
      }
      public Builder ClearRelations() {
        PrepareBuilder();
        result.relations_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::OSMPBF.ChangeSet> ChangesetsList {
        get { return PrepareBuilder().changesets_; }
      }
      public int ChangesetsCount {
        get { return result.ChangesetsCount; }
      }
      public global::OSMPBF.ChangeSet GetChangesets(int index) {
        return result.GetChangesets(index);
      }
      public Builder SetChangesets(int index, global::OSMPBF.ChangeSet value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.changesets_[index] = value;
        return this;
      }
      public Builder SetChangesets(int index, global::OSMPBF.ChangeSet.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.changesets_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddChangesets(global::OSMPBF.ChangeSet value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.changesets_.Add(value);
        return this;
      }
      public Builder AddChangesets(global::OSMPBF.ChangeSet.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.changesets_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeChangesets(scg::IEnumerable<global::OSMPBF.ChangeSet> values) {
        PrepareBuilder();
        result.changesets_.Add(values);
        return this;
      }
      public Builder ClearChangesets() {
        PrepareBuilder();
        result.changesets_.Clear();
        return this;
      }
    }
    static PrimitiveGroup() {
      object.ReferenceEquals(global::OSMPBF.Osmformat.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class StringTable : pb::GeneratedMessageLite<StringTable, StringTable.Builder> {
    private StringTable() { }
    private static readonly StringTable defaultInstance = new StringTable().MakeReadOnly();
    private static readonly string[] _stringTableFieldNames = new string[] { "s" };
    private static readonly uint[] _stringTableFieldTags = new uint[] { 10 };
    public static StringTable DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StringTable DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StringTable ThisMessage {
      get { return this; }
    }
    
    public const int SFieldNumber = 1;
    private pbc::PopsicleList<pb::ByteString> s_ = new pbc::PopsicleList<pb::ByteString>();
    public scg::IList<pb::ByteString> SList {
      get { return pbc::Lists.AsReadOnly(s_); }
    }
    public int SCount {
      get { return s_.Count; }
    }
    public pb::ByteString GetS(int index) {
      return s_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _stringTableFieldNames;
      if (s_.Count > 0) {
        output.WriteBytesArray(1, field_names[0], s_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          foreach (pb::ByteString element in SList) {
            dataSize += pb::CodedOutputStream.ComputeBytesSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * s_.Count;
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      foreach(pb::ByteString i in s_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      StringTable other = obj as StringTable;
      if (other == null) return false;
      if(s_.Count != other.s_.Count) return false;
      for(int ix=0; ix < s_.Count; ix++)
        if(!s_[ix].Equals(other.s_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("s", s_, writer);
    }
    #endregion
    
    public static StringTable ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StringTable ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StringTable ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StringTable ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StringTable ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StringTable ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StringTable ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StringTable ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StringTable ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StringTable ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StringTable MakeReadOnly() {
      s_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StringTable prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<StringTable, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StringTable cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StringTable result;
      
      private StringTable PrepareBuilder() {
        if (resultIsReadOnly) {
          StringTable original = result;
          result = new StringTable();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StringTable MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override StringTable DefaultInstanceForType {
        get { return global::OSMPBF.StringTable.DefaultInstance; }
      }
      
      public override StringTable BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is StringTable) {
          return MergeFrom((StringTable) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StringTable other) {
        if (other == global::OSMPBF.StringTable.DefaultInstance) return this;
        PrepareBuilder();
        if (other.s_.Count != 0) {
          result.s_.Add(other.s_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_stringTableFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _stringTableFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadBytesArray(tag, field_name, result.s_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public pbc::IPopsicleList<pb::ByteString> SList {
        get { return PrepareBuilder().s_; }
      }
      public int SCount {
        get { return result.SCount; }
      }
      public pb::ByteString GetS(int index) {
        return result.GetS(index);
      }
      public Builder SetS(int index, pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.s_[index] = value;
        return this;
      }
      public Builder AddS(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.s_.Add(value);
        return this;
      }
      public Builder AddRangeS(scg::IEnumerable<pb::ByteString> values) {
        PrepareBuilder();
        result.s_.Add(values);
        return this;
      }
      public Builder ClearS() {
        PrepareBuilder();
        result.s_.Clear();
        return this;
      }
    }
    static StringTable() {
      object.ReferenceEquals(global::OSMPBF.Osmformat.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Info : pb::GeneratedMessageLite<Info, Info.Builder> {
    private Info() { }
    private static readonly Info defaultInstance = new Info().MakeReadOnly();
    private static readonly string[] _infoFieldNames = new string[] { "changeset", "timestamp", "uid", "user_sid", "version", "visible" };
    private static readonly uint[] _infoFieldTags = new uint[] { 24, 16, 32, 40, 8, 48 };
    public static Info DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Info DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Info ThisMessage {
      get { return this; }
    }
    
    public const int VersionFieldNumber = 1;
    private bool hasVersion;
    private int version_ = -1;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public int Version {
      get { return version_; }
    }
    
    public const int TimestampFieldNumber = 2;
    private bool hasTimestamp;
    private long timestamp_;
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public long Timestamp {
      get { return timestamp_; }
    }
    
    public const int ChangesetFieldNumber = 3;
    private bool hasChangeset;
    private long changeset_;
    public bool HasChangeset {
      get { return hasChangeset; }
    }
    public long Changeset {
      get { return changeset_; }
    }
    
    public const int UidFieldNumber = 4;
    private bool hasUid;
    private int uid_;
    public bool HasUid {
      get { return hasUid; }
    }
    public int Uid {
      get { return uid_; }
    }
    
    public const int UserSidFieldNumber = 5;
    private bool hasUserSid;
    private uint userSid_;
    public bool HasUserSid {
      get { return hasUserSid; }
    }
    [global::System.CLSCompliant(false)]
    public uint UserSid {
      get { return userSid_; }
    }
    
    public const int VisibleFieldNumber = 6;
    private bool hasVisible;
    private bool visible_;
    public bool HasVisible {
      get { return hasVisible; }
    }
    public bool Visible {
      get { return visible_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _infoFieldNames;
      if (hasVersion) {
        output.WriteInt32(1, field_names[4], Version);
      }
      if (hasTimestamp) {
        output.WriteInt64(2, field_names[1], Timestamp);
      }
      if (hasChangeset) {
        output.WriteInt64(3, field_names[0], Changeset);
      }
      if (hasUid) {
        output.WriteInt32(4, field_names[2], Uid);
      }
      if (hasUserSid) {
        output.WriteUInt32(5, field_names[3], UserSid);
      }
      if (hasVisible) {
        output.WriteBool(6, field_names[5], Visible);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Version);
        }
        if (hasTimestamp) {
          size += pb::CodedOutputStream.ComputeInt64Size(2, Timestamp);
        }
        if (hasChangeset) {
          size += pb::CodedOutputStream.ComputeInt64Size(3, Changeset);
        }
        if (hasUid) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Uid);
        }
        if (hasUserSid) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, UserSid);
        }
        if (hasVisible) {
          size += pb::CodedOutputStream.ComputeBoolSize(6, Visible);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasVersion) hash ^= version_.GetHashCode();
      if (hasTimestamp) hash ^= timestamp_.GetHashCode();
      if (hasChangeset) hash ^= changeset_.GetHashCode();
      if (hasUid) hash ^= uid_.GetHashCode();
      if (hasUserSid) hash ^= userSid_.GetHashCode();
      if (hasVisible) hash ^= visible_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      Info other = obj as Info;
      if (other == null) return false;
      if (hasVersion != other.hasVersion || (hasVersion && !version_.Equals(other.version_))) return false;
      if (hasTimestamp != other.hasTimestamp || (hasTimestamp && !timestamp_.Equals(other.timestamp_))) return false;
      if (hasChangeset != other.hasChangeset || (hasChangeset && !changeset_.Equals(other.changeset_))) return false;
      if (hasUid != other.hasUid || (hasUid && !uid_.Equals(other.uid_))) return false;
      if (hasUserSid != other.hasUserSid || (hasUserSid && !userSid_.Equals(other.userSid_))) return false;
      if (hasVisible != other.hasVisible || (hasVisible && !visible_.Equals(other.visible_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("version", hasVersion, version_, writer);
      PrintField("timestamp", hasTimestamp, timestamp_, writer);
      PrintField("changeset", hasChangeset, changeset_, writer);
      PrintField("uid", hasUid, uid_, writer);
      PrintField("user_sid", hasUserSid, userSid_, writer);
      PrintField("visible", hasVisible, visible_, writer);
    }
    #endregion
    
    public static Info ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Info ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Info ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Info ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Info ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Info ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Info ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Info ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Info ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Info ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Info MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Info prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<Info, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Info cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Info result;
      
      private Info PrepareBuilder() {
        if (resultIsReadOnly) {
          Info original = result;
          result = new Info();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Info MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override Info DefaultInstanceForType {
        get { return global::OSMPBF.Info.DefaultInstance; }
      }
      
      public override Info BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is Info) {
          return MergeFrom((Info) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Info other) {
        if (other == global::OSMPBF.Info.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasChangeset) {
          Changeset = other.Changeset;
        }
        if (other.HasUid) {
          Uid = other.Uid;
        }
        if (other.HasUserSid) {
          UserSid = other.UserSid;
        }
        if (other.HasVisible) {
          Visible = other.Visible;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_infoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _infoFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVersion = input.ReadInt32(ref result.version_);
              break;
            }
            case 16: {
              result.hasTimestamp = input.ReadInt64(ref result.timestamp_);
              break;
            }
            case 24: {
              result.hasChangeset = input.ReadInt64(ref result.changeset_);
              break;
            }
            case 32: {
              result.hasUid = input.ReadInt32(ref result.uid_);
              break;
            }
            case 40: {
              result.hasUserSid = input.ReadUInt32(ref result.userSid_);
              break;
            }
            case 48: {
              result.hasVisible = input.ReadBool(ref result.visible_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public int Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(int value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = -1;
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.hasTimestamp; }
      }
      public long Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(long value) {
        PrepareBuilder();
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        PrepareBuilder();
        result.hasTimestamp = false;
        result.timestamp_ = 0L;
        return this;
      }
      
      public bool HasChangeset {
        get { return result.hasChangeset; }
      }
      public long Changeset {
        get { return result.Changeset; }
        set { SetChangeset(value); }
      }
      public Builder SetChangeset(long value) {
        PrepareBuilder();
        result.hasChangeset = true;
        result.changeset_ = value;
        return this;
      }
      public Builder ClearChangeset() {
        PrepareBuilder();
        result.hasChangeset = false;
        result.changeset_ = 0L;
        return this;
      }
      
      public bool HasUid {
        get { return result.hasUid; }
      }
      public int Uid {
        get { return result.Uid; }
        set { SetUid(value); }
      }
      public Builder SetUid(int value) {
        PrepareBuilder();
        result.hasUid = true;
        result.uid_ = value;
        return this;
      }
      public Builder ClearUid() {
        PrepareBuilder();
        result.hasUid = false;
        result.uid_ = 0;
        return this;
      }
      
      public bool HasUserSid {
        get { return result.hasUserSid; }
      }
      [global::System.CLSCompliant(false)]
      public uint UserSid {
        get { return result.UserSid; }
        set { SetUserSid(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetUserSid(uint value) {
        PrepareBuilder();
        result.hasUserSid = true;
        result.userSid_ = value;
        return this;
      }
      public Builder ClearUserSid() {
        PrepareBuilder();
        result.hasUserSid = false;
        result.userSid_ = 0;
        return this;
      }
      
      public bool HasVisible {
        get { return result.hasVisible; }
      }
      public bool Visible {
        get { return result.Visible; }
        set { SetVisible(value); }
      }
      public Builder SetVisible(bool value) {
        PrepareBuilder();
        result.hasVisible = true;
        result.visible_ = value;
        return this;
      }
      public Builder ClearVisible() {
        PrepareBuilder();
        result.hasVisible = false;
        result.visible_ = false;
        return this;
      }
    }
    static Info() {
      object.ReferenceEquals(global::OSMPBF.Osmformat.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class DenseInfo : pb::GeneratedMessageLite<DenseInfo, DenseInfo.Builder> {
    private DenseInfo() { }
    private static readonly DenseInfo defaultInstance = new DenseInfo().MakeReadOnly();
    private static readonly string[] _denseInfoFieldNames = new string[] { "changeset", "timestamp", "uid", "user_sid", "version", "visible" };
    private static readonly uint[] _denseInfoFieldTags = new uint[] { 26, 18, 34, 42, 10, 50 };
    public static DenseInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DenseInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DenseInfo ThisMessage {
      get { return this; }
    }
    
    public const int VersionFieldNumber = 1;
    private int versionMemoizedSerializedSize;
    private pbc::PopsicleList<int> version_ = new pbc::PopsicleList<int>();
    public scg::IList<int> VersionList {
      get { return pbc::Lists.AsReadOnly(version_); }
    }
    public int VersionCount {
      get { return version_.Count; }
    }
    public int GetVersion(int index) {
      return version_[index];
    }
    
    public const int TimestampFieldNumber = 2;
    private int timestampMemoizedSerializedSize;
    private pbc::PopsicleList<long> timestamp_ = new pbc::PopsicleList<long>();
    public scg::IList<long> TimestampList {
      get { return pbc::Lists.AsReadOnly(timestamp_); }
    }
    public int TimestampCount {
      get { return timestamp_.Count; }
    }
    public long GetTimestamp(int index) {
      return timestamp_[index];
    }
    
    public const int ChangesetFieldNumber = 3;
    private int changesetMemoizedSerializedSize;
    private pbc::PopsicleList<long> changeset_ = new pbc::PopsicleList<long>();
    public scg::IList<long> ChangesetList {
      get { return pbc::Lists.AsReadOnly(changeset_); }
    }
    public int ChangesetCount {
      get { return changeset_.Count; }
    }
    public long GetChangeset(int index) {
      return changeset_[index];
    }
    
    public const int UidFieldNumber = 4;
    private int uidMemoizedSerializedSize;
    private pbc::PopsicleList<int> uid_ = new pbc::PopsicleList<int>();
    public scg::IList<int> UidList {
      get { return pbc::Lists.AsReadOnly(uid_); }
    }
    public int UidCount {
      get { return uid_.Count; }
    }
    public int GetUid(int index) {
      return uid_[index];
    }
    
    public const int UserSidFieldNumber = 5;
    private int userSidMemoizedSerializedSize;
    private pbc::PopsicleList<int> userSid_ = new pbc::PopsicleList<int>();
    public scg::IList<int> UserSidList {
      get { return pbc::Lists.AsReadOnly(userSid_); }
    }
    public int UserSidCount {
      get { return userSid_.Count; }
    }
    public int GetUserSid(int index) {
      return userSid_[index];
    }
    
    public const int VisibleFieldNumber = 6;
    private int visibleMemoizedSerializedSize;
    private pbc::PopsicleList<bool> visible_ = new pbc::PopsicleList<bool>();
    public scg::IList<bool> VisibleList {
      get { return pbc::Lists.AsReadOnly(visible_); }
    }
    public int VisibleCount {
      get { return visible_.Count; }
    }
    public bool GetVisible(int index) {
      return visible_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _denseInfoFieldNames;
      if (version_.Count > 0) {
        output.WritePackedInt32Array(1, field_names[4], versionMemoizedSerializedSize, version_);
      }
      if (timestamp_.Count > 0) {
        output.WritePackedSInt64Array(2, field_names[1], timestampMemoizedSerializedSize, timestamp_);
      }
      if (changeset_.Count > 0) {
        output.WritePackedSInt64Array(3, field_names[0], changesetMemoizedSerializedSize, changeset_);
      }
      if (uid_.Count > 0) {
        output.WritePackedSInt32Array(4, field_names[2], uidMemoizedSerializedSize, uid_);
      }
      if (userSid_.Count > 0) {
        output.WritePackedSInt32Array(5, field_names[3], userSidMemoizedSerializedSize, userSid_);
      }
      if (visible_.Count > 0) {
        output.WritePackedBoolArray(6, field_names[5], visibleMemoizedSerializedSize, visible_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          foreach (int element in VersionList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          if (version_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          versionMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          foreach (long element in TimestampList) {
            dataSize += pb::CodedOutputStream.ComputeSInt64SizeNoTag(element);
          }
          size += dataSize;
          if (timestamp_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          timestampMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          foreach (long element in ChangesetList) {
            dataSize += pb::CodedOutputStream.ComputeSInt64SizeNoTag(element);
          }
          size += dataSize;
          if (changeset_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          changesetMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          foreach (int element in UidList) {
            dataSize += pb::CodedOutputStream.ComputeSInt32SizeNoTag(element);
          }
          size += dataSize;
          if (uid_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          uidMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          foreach (int element in UserSidList) {
            dataSize += pb::CodedOutputStream.ComputeSInt32SizeNoTag(element);
          }
          size += dataSize;
          if (userSid_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          userSidMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          dataSize = 1 * visible_.Count;
          size += dataSize;
          if (visible_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          visibleMemoizedSerializedSize = dataSize;
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      foreach(int i in version_)
        hash ^= i.GetHashCode();
      foreach(long i in timestamp_)
        hash ^= i.GetHashCode();
      foreach(long i in changeset_)
        hash ^= i.GetHashCode();
      foreach(int i in uid_)
        hash ^= i.GetHashCode();
      foreach(int i in userSid_)
        hash ^= i.GetHashCode();
      foreach(bool i in visible_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      DenseInfo other = obj as DenseInfo;
      if (other == null) return false;
      if(version_.Count != other.version_.Count) return false;
      for(int ix=0; ix < version_.Count; ix++)
        if(!version_[ix].Equals(other.version_[ix])) return false;
      if(timestamp_.Count != other.timestamp_.Count) return false;
      for(int ix=0; ix < timestamp_.Count; ix++)
        if(!timestamp_[ix].Equals(other.timestamp_[ix])) return false;
      if(changeset_.Count != other.changeset_.Count) return false;
      for(int ix=0; ix < changeset_.Count; ix++)
        if(!changeset_[ix].Equals(other.changeset_[ix])) return false;
      if(uid_.Count != other.uid_.Count) return false;
      for(int ix=0; ix < uid_.Count; ix++)
        if(!uid_[ix].Equals(other.uid_[ix])) return false;
      if(userSid_.Count != other.userSid_.Count) return false;
      for(int ix=0; ix < userSid_.Count; ix++)
        if(!userSid_[ix].Equals(other.userSid_[ix])) return false;
      if(visible_.Count != other.visible_.Count) return false;
      for(int ix=0; ix < visible_.Count; ix++)
        if(!visible_[ix].Equals(other.visible_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("version", version_, writer);
      PrintField("timestamp", timestamp_, writer);
      PrintField("changeset", changeset_, writer);
      PrintField("uid", uid_, writer);
      PrintField("user_sid", userSid_, writer);
      PrintField("visible", visible_, writer);
    }
    #endregion
    
    public static DenseInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DenseInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DenseInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DenseInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DenseInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DenseInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DenseInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DenseInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DenseInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DenseInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DenseInfo MakeReadOnly() {
      version_.MakeReadOnly();
      timestamp_.MakeReadOnly();
      changeset_.MakeReadOnly();
      uid_.MakeReadOnly();
      userSid_.MakeReadOnly();
      visible_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DenseInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<DenseInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DenseInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DenseInfo result;
      
      private DenseInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          DenseInfo original = result;
          result = new DenseInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DenseInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override DenseInfo DefaultInstanceForType {
        get { return global::OSMPBF.DenseInfo.DefaultInstance; }
      }
      
      public override DenseInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is DenseInfo) {
          return MergeFrom((DenseInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DenseInfo other) {
        if (other == global::OSMPBF.DenseInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.version_.Count != 0) {
          result.version_.Add(other.version_);
        }
        if (other.timestamp_.Count != 0) {
          result.timestamp_.Add(other.timestamp_);
        }
        if (other.changeset_.Count != 0) {
          result.changeset_.Add(other.changeset_);
        }
        if (other.uid_.Count != 0) {
          result.uid_.Add(other.uid_);
        }
        if (other.userSid_.Count != 0) {
          result.userSid_.Add(other.userSid_);
        }
        if (other.visible_.Count != 0) {
          result.visible_.Add(other.visible_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_denseInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _denseInfoFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 8: {
              input.ReadInt32Array(tag, field_name, result.version_);
              break;
            }
            case 18:
            case 16: {
              input.ReadSInt64Array(tag, field_name, result.timestamp_);
              break;
            }
            case 26:
            case 24: {
              input.ReadSInt64Array(tag, field_name, result.changeset_);
              break;
            }
            case 34:
            case 32: {
              input.ReadSInt32Array(tag, field_name, result.uid_);
              break;
            }
            case 42:
            case 40: {
              input.ReadSInt32Array(tag, field_name, result.userSid_);
              break;
            }
            case 50:
            case 48: {
              input.ReadBoolArray(tag, field_name, result.visible_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public pbc::IPopsicleList<int> VersionList {
        get { return PrepareBuilder().version_; }
      }
      public int VersionCount {
        get { return result.VersionCount; }
      }
      public int GetVersion(int index) {
        return result.GetVersion(index);
      }
      public Builder SetVersion(int index, int value) {
        PrepareBuilder();
        result.version_[index] = value;
        return this;
      }
      public Builder AddVersion(int value) {
        PrepareBuilder();
        result.version_.Add(value);
        return this;
      }
      public Builder AddRangeVersion(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.version_.Add(values);
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.version_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<long> TimestampList {
        get { return PrepareBuilder().timestamp_; }
      }
      public int TimestampCount {
        get { return result.TimestampCount; }
      }
      public long GetTimestamp(int index) {
        return result.GetTimestamp(index);
      }
      public Builder SetTimestamp(int index, long value) {
        PrepareBuilder();
        result.timestamp_[index] = value;
        return this;
      }
      public Builder AddTimestamp(long value) {
        PrepareBuilder();
        result.timestamp_.Add(value);
        return this;
      }
      public Builder AddRangeTimestamp(scg::IEnumerable<long> values) {
        PrepareBuilder();
        result.timestamp_.Add(values);
        return this;
      }
      public Builder ClearTimestamp() {
        PrepareBuilder();
        result.timestamp_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<long> ChangesetList {
        get { return PrepareBuilder().changeset_; }
      }
      public int ChangesetCount {
        get { return result.ChangesetCount; }
      }
      public long GetChangeset(int index) {
        return result.GetChangeset(index);
      }
      public Builder SetChangeset(int index, long value) {
        PrepareBuilder();
        result.changeset_[index] = value;
        return this;
      }
      public Builder AddChangeset(long value) {
        PrepareBuilder();
        result.changeset_.Add(value);
        return this;
      }
      public Builder AddRangeChangeset(scg::IEnumerable<long> values) {
        PrepareBuilder();
        result.changeset_.Add(values);
        return this;
      }
      public Builder ClearChangeset() {
        PrepareBuilder();
        result.changeset_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> UidList {
        get { return PrepareBuilder().uid_; }
      }
      public int UidCount {
        get { return result.UidCount; }
      }
      public int GetUid(int index) {
        return result.GetUid(index);
      }
      public Builder SetUid(int index, int value) {
        PrepareBuilder();
        result.uid_[index] = value;
        return this;
      }
      public Builder AddUid(int value) {
        PrepareBuilder();
        result.uid_.Add(value);
        return this;
      }
      public Builder AddRangeUid(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.uid_.Add(values);
        return this;
      }
      public Builder ClearUid() {
        PrepareBuilder();
        result.uid_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> UserSidList {
        get { return PrepareBuilder().userSid_; }
      }
      public int UserSidCount {
        get { return result.UserSidCount; }
      }
      public int GetUserSid(int index) {
        return result.GetUserSid(index);
      }
      public Builder SetUserSid(int index, int value) {
        PrepareBuilder();
        result.userSid_[index] = value;
        return this;
      }
      public Builder AddUserSid(int value) {
        PrepareBuilder();
        result.userSid_.Add(value);
        return this;
      }
      public Builder AddRangeUserSid(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.userSid_.Add(values);
        return this;
      }
      public Builder ClearUserSid() {
        PrepareBuilder();
        result.userSid_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<bool> VisibleList {
        get { return PrepareBuilder().visible_; }
      }
      public int VisibleCount {
        get { return result.VisibleCount; }
      }
      public bool GetVisible(int index) {
        return result.GetVisible(index);
      }
      public Builder SetVisible(int index, bool value) {
        PrepareBuilder();
        result.visible_[index] = value;
        return this;
      }
      public Builder AddVisible(bool value) {
        PrepareBuilder();
        result.visible_.Add(value);
        return this;
      }
      public Builder AddRangeVisible(scg::IEnumerable<bool> values) {
        PrepareBuilder();
        result.visible_.Add(values);
        return this;
      }
      public Builder ClearVisible() {
        PrepareBuilder();
        result.visible_.Clear();
        return this;
      }
    }
    static DenseInfo() {
      object.ReferenceEquals(global::OSMPBF.Osmformat.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ChangeSet : pb::GeneratedMessageLite<ChangeSet, ChangeSet.Builder> {
    private ChangeSet() { }
    private static readonly ChangeSet defaultInstance = new ChangeSet().MakeReadOnly();
    private static readonly string[] _changeSetFieldNames = new string[] { "id" };
    private static readonly uint[] _changeSetFieldTags = new uint[] { 8 };
    public static ChangeSet DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ChangeSet DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ChangeSet ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private long id_;
    public bool HasId {
      get { return hasId; }
    }
    public long Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _changeSetFieldNames;
      if (hasId) {
        output.WriteInt64(1, field_names[0], Id);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeInt64Size(1, Id);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      ChangeSet other = obj as ChangeSet;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
    }
    #endregion
    
    public static ChangeSet ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChangeSet ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChangeSet ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChangeSet ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChangeSet ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChangeSet ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ChangeSet ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ChangeSet ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ChangeSet ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChangeSet ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ChangeSet MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ChangeSet prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<ChangeSet, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ChangeSet cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ChangeSet result;
      
      private ChangeSet PrepareBuilder() {
        if (resultIsReadOnly) {
          ChangeSet original = result;
          result = new ChangeSet();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ChangeSet MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override ChangeSet DefaultInstanceForType {
        get { return global::OSMPBF.ChangeSet.DefaultInstance; }
      }
      
      public override ChangeSet BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is ChangeSet) {
          return MergeFrom((ChangeSet) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ChangeSet other) {
        if (other == global::OSMPBF.ChangeSet.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_changeSetFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _changeSetFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt64(ref result.id_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public long Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(long value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0L;
        return this;
      }
    }
    static ChangeSet() {
      object.ReferenceEquals(global::OSMPBF.Osmformat.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Node : pb::GeneratedMessageLite<Node, Node.Builder> {
    private Node() { }
    private static readonly Node defaultInstance = new Node().MakeReadOnly();
    private static readonly string[] _nodeFieldNames = new string[] { "id", "info", "keys", "lat", "lon", "vals" };
    private static readonly uint[] _nodeFieldTags = new uint[] { 8, 34, 18, 64, 72, 26 };
    public static Node DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Node DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Node ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private long id_;
    public bool HasId {
      get { return hasId; }
    }
    public long Id {
      get { return id_; }
    }
    
    public const int KeysFieldNumber = 2;
    private int keysMemoizedSerializedSize;
    private pbc::PopsicleList<uint> keys_ = new pbc::PopsicleList<uint>();
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> KeysList {
      get { return pbc::Lists.AsReadOnly(keys_); }
    }
    public int KeysCount {
      get { return keys_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetKeys(int index) {
      return keys_[index];
    }
    
    public const int ValsFieldNumber = 3;
    private int valsMemoizedSerializedSize;
    private pbc::PopsicleList<uint> vals_ = new pbc::PopsicleList<uint>();
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> ValsList {
      get { return pbc::Lists.AsReadOnly(vals_); }
    }
    public int ValsCount {
      get { return vals_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetVals(int index) {
      return vals_[index];
    }
    
    public const int InfoFieldNumber = 4;
    private bool hasInfo;
    private global::OSMPBF.Info info_;
    public bool HasInfo {
      get { return hasInfo; }
    }
    public global::OSMPBF.Info Info {
      get { return info_ ?? global::OSMPBF.Info.DefaultInstance; }
    }
    
    public const int LatFieldNumber = 8;
    private bool hasLat;
    private long lat_;
    public bool HasLat {
      get { return hasLat; }
    }
    public long Lat {
      get { return lat_; }
    }
    
    public const int LonFieldNumber = 9;
    private bool hasLon;
    private long lon_;
    public bool HasLon {
      get { return hasLon; }
    }
    public long Lon {
      get { return lon_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasLat) return false;
        if (!hasLon) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _nodeFieldNames;
      if (hasId) {
        output.WriteSInt64(1, field_names[0], Id);
      }
      if (keys_.Count > 0) {
        output.WritePackedUInt32Array(2, field_names[2], keysMemoizedSerializedSize, keys_);
      }
      if (vals_.Count > 0) {
        output.WritePackedUInt32Array(3, field_names[5], valsMemoizedSerializedSize, vals_);
      }
      if (hasInfo) {
        output.WriteMessage(4, field_names[1], Info);
      }
      if (hasLat) {
        output.WriteSInt64(8, field_names[3], Lat);
      }
      if (hasLon) {
        output.WriteSInt64(9, field_names[4], Lon);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeSInt64Size(1, Id);
        }
        {
          int dataSize = 0;
          foreach (uint element in KeysList) {
            dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
          }
          size += dataSize;
          if (keys_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          keysMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          foreach (uint element in ValsList) {
            dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
          }
          size += dataSize;
          if (vals_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          valsMemoizedSerializedSize = dataSize;
        }
        if (hasInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Info);
        }
        if (hasLat) {
          size += pb::CodedOutputStream.ComputeSInt64Size(8, Lat);
        }
        if (hasLon) {
          size += pb::CodedOutputStream.ComputeSInt64Size(9, Lon);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      foreach(uint i in keys_)
        hash ^= i.GetHashCode();
      foreach(uint i in vals_)
        hash ^= i.GetHashCode();
      if (hasInfo) hash ^= info_.GetHashCode();
      if (hasLat) hash ^= lat_.GetHashCode();
      if (hasLon) hash ^= lon_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      Node other = obj as Node;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if(keys_.Count != other.keys_.Count) return false;
      for(int ix=0; ix < keys_.Count; ix++)
        if(!keys_[ix].Equals(other.keys_[ix])) return false;
      if(vals_.Count != other.vals_.Count) return false;
      for(int ix=0; ix < vals_.Count; ix++)
        if(!vals_[ix].Equals(other.vals_[ix])) return false;
      if (hasInfo != other.hasInfo || (hasInfo && !info_.Equals(other.info_))) return false;
      if (hasLat != other.hasLat || (hasLat && !lat_.Equals(other.lat_))) return false;
      if (hasLon != other.hasLon || (hasLon && !lon_.Equals(other.lon_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("keys", keys_, writer);
      PrintField("vals", vals_, writer);
      PrintField("info", hasInfo, info_, writer);
      PrintField("lat", hasLat, lat_, writer);
      PrintField("lon", hasLon, lon_, writer);
    }
    #endregion
    
    public static Node ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Node ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Node ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Node ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Node ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Node ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Node ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Node ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Node ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Node ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Node MakeReadOnly() {
      keys_.MakeReadOnly();
      vals_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Node prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<Node, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Node cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Node result;
      
      private Node PrepareBuilder() {
        if (resultIsReadOnly) {
          Node original = result;
          result = new Node();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Node MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override Node DefaultInstanceForType {
        get { return global::OSMPBF.Node.DefaultInstance; }
      }
      
      public override Node BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is Node) {
          return MergeFrom((Node) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Node other) {
        if (other == global::OSMPBF.Node.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.keys_.Count != 0) {
          result.keys_.Add(other.keys_);
        }
        if (other.vals_.Count != 0) {
          result.vals_.Add(other.vals_);
        }
        if (other.HasInfo) {
          MergeInfo(other.Info);
        }
        if (other.HasLat) {
          Lat = other.Lat;
        }
        if (other.HasLon) {
          Lon = other.Lon;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_nodeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _nodeFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadSInt64(ref result.id_);
              break;
            }
            case 18:
            case 16: {
              input.ReadUInt32Array(tag, field_name, result.keys_);
              break;
            }
            case 26:
            case 24: {
              input.ReadUInt32Array(tag, field_name, result.vals_);
              break;
            }
            case 34: {
              global::OSMPBF.Info.Builder subBuilder = global::OSMPBF.Info.CreateBuilder();
              if (result.hasInfo) {
                subBuilder.MergeFrom(Info);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Info = subBuilder.BuildPartial();
              break;
            }
            case 64: {
              result.hasLat = input.ReadSInt64(ref result.lat_);
              break;
            }
            case 72: {
              result.hasLon = input.ReadSInt64(ref result.lon_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public long Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(long value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> KeysList {
        get { return PrepareBuilder().keys_; }
      }
      public int KeysCount {
        get { return result.KeysCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetKeys(int index) {
        return result.GetKeys(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetKeys(int index, uint value) {
        PrepareBuilder();
        result.keys_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddKeys(uint value) {
        PrepareBuilder();
        result.keys_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeKeys(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.keys_.Add(values);
        return this;
      }
      public Builder ClearKeys() {
        PrepareBuilder();
        result.keys_.Clear();
        return this;
      }
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> ValsList {
        get { return PrepareBuilder().vals_; }
      }
      public int ValsCount {
        get { return result.ValsCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetVals(int index) {
        return result.GetVals(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetVals(int index, uint value) {
        PrepareBuilder();
        result.vals_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddVals(uint value) {
        PrepareBuilder();
        result.vals_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeVals(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.vals_.Add(values);
        return this;
      }
      public Builder ClearVals() {
        PrepareBuilder();
        result.vals_.Clear();
        return this;
      }
      
      public bool HasInfo {
       get { return result.hasInfo; }
      }
      public global::OSMPBF.Info Info {
        get { return result.Info; }
        set { SetInfo(value); }
      }
      public Builder SetInfo(global::OSMPBF.Info value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInfo = true;
        result.info_ = value;
        return this;
      }
      public Builder SetInfo(global::OSMPBF.Info.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasInfo = true;
        result.info_ = builderForValue.Build();
        return this;
      }
      public Builder MergeInfo(global::OSMPBF.Info value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasInfo &&
            result.info_ != global::OSMPBF.Info.DefaultInstance) {
            result.info_ = global::OSMPBF.Info.CreateBuilder(result.info_).MergeFrom(value).BuildPartial();
        } else {
          result.info_ = value;
        }
        result.hasInfo = true;
        return this;
      }
      public Builder ClearInfo() {
        PrepareBuilder();
        result.hasInfo = false;
        result.info_ = null;
        return this;
      }
      
      public bool HasLat {
        get { return result.hasLat; }
      }
      public long Lat {
        get { return result.Lat; }
        set { SetLat(value); }
      }
      public Builder SetLat(long value) {
        PrepareBuilder();
        result.hasLat = true;
        result.lat_ = value;
        return this;
      }
      public Builder ClearLat() {
        PrepareBuilder();
        result.hasLat = false;
        result.lat_ = 0;
        return this;
      }
      
      public bool HasLon {
        get { return result.hasLon; }
      }
      public long Lon {
        get { return result.Lon; }
        set { SetLon(value); }
      }
      public Builder SetLon(long value) {
        PrepareBuilder();
        result.hasLon = true;
        result.lon_ = value;
        return this;
      }
      public Builder ClearLon() {
        PrepareBuilder();
        result.hasLon = false;
        result.lon_ = 0;
        return this;
      }
    }
    static Node() {
      object.ReferenceEquals(global::OSMPBF.Osmformat.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class DenseNodes : pb::GeneratedMessageLite<DenseNodes, DenseNodes.Builder> {
    private DenseNodes() { }
    private static readonly DenseNodes defaultInstance = new DenseNodes().MakeReadOnly();
    private static readonly string[] _denseNodesFieldNames = new string[] { "denseinfo", "id", "keys_vals", "lat", "lon" };
    private static readonly uint[] _denseNodesFieldTags = new uint[] { 42, 10, 82, 66, 74 };
    public static DenseNodes DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DenseNodes DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DenseNodes ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private int idMemoizedSerializedSize;
    private pbc::PopsicleList<long> id_ = new pbc::PopsicleList<long>();
    public scg::IList<long> IdList {
      get { return pbc::Lists.AsReadOnly(id_); }
    }
    public int IdCount {
      get { return id_.Count; }
    }
    public long GetId(int index) {
      return id_[index];
    }
    
    public const int DenseinfoFieldNumber = 5;
    private bool hasDenseinfo;
    private global::OSMPBF.DenseInfo denseinfo_;
    public bool HasDenseinfo {
      get { return hasDenseinfo; }
    }
    public global::OSMPBF.DenseInfo Denseinfo {
      get { return denseinfo_ ?? global::OSMPBF.DenseInfo.DefaultInstance; }
    }
    
    public const int LatFieldNumber = 8;
    private int latMemoizedSerializedSize;
    private pbc::PopsicleList<long> lat_ = new pbc::PopsicleList<long>();
    public scg::IList<long> LatList {
      get { return pbc::Lists.AsReadOnly(lat_); }
    }
    public int LatCount {
      get { return lat_.Count; }
    }
    public long GetLat(int index) {
      return lat_[index];
    }
    
    public const int LonFieldNumber = 9;
    private int lonMemoizedSerializedSize;
    private pbc::PopsicleList<long> lon_ = new pbc::PopsicleList<long>();
    public scg::IList<long> LonList {
      get { return pbc::Lists.AsReadOnly(lon_); }
    }
    public int LonCount {
      get { return lon_.Count; }
    }
    public long GetLon(int index) {
      return lon_[index];
    }
    
    public const int KeysValsFieldNumber = 10;
    private int keysValsMemoizedSerializedSize;
    private pbc::PopsicleList<int> keysVals_ = new pbc::PopsicleList<int>();
    public scg::IList<int> KeysValsList {
      get { return pbc::Lists.AsReadOnly(keysVals_); }
    }
    public int KeysValsCount {
      get { return keysVals_.Count; }
    }
    public int GetKeysVals(int index) {
      return keysVals_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _denseNodesFieldNames;
      if (id_.Count > 0) {
        output.WritePackedSInt64Array(1, field_names[1], idMemoizedSerializedSize, id_);
      }
      if (hasDenseinfo) {
        output.WriteMessage(5, field_names[0], Denseinfo);
      }
      if (lat_.Count > 0) {
        output.WritePackedSInt64Array(8, field_names[3], latMemoizedSerializedSize, lat_);
      }
      if (lon_.Count > 0) {
        output.WritePackedSInt64Array(9, field_names[4], lonMemoizedSerializedSize, lon_);
      }
      if (keysVals_.Count > 0) {
        output.WritePackedInt32Array(10, field_names[2], keysValsMemoizedSerializedSize, keysVals_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          foreach (long element in IdList) {
            dataSize += pb::CodedOutputStream.ComputeSInt64SizeNoTag(element);
          }
          size += dataSize;
          if (id_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          idMemoizedSerializedSize = dataSize;
        }
        if (hasDenseinfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, Denseinfo);
        }
        {
          int dataSize = 0;
          foreach (long element in LatList) {
            dataSize += pb::CodedOutputStream.ComputeSInt64SizeNoTag(element);
          }
          size += dataSize;
          if (lat_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          latMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          foreach (long element in LonList) {
            dataSize += pb::CodedOutputStream.ComputeSInt64SizeNoTag(element);
          }
          size += dataSize;
          if (lon_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          lonMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          foreach (int element in KeysValsList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          if (keysVals_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          keysValsMemoizedSerializedSize = dataSize;
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      foreach(long i in id_)
        hash ^= i.GetHashCode();
      if (hasDenseinfo) hash ^= denseinfo_.GetHashCode();
      foreach(long i in lat_)
        hash ^= i.GetHashCode();
      foreach(long i in lon_)
        hash ^= i.GetHashCode();
      foreach(int i in keysVals_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      DenseNodes other = obj as DenseNodes;
      if (other == null) return false;
      if(id_.Count != other.id_.Count) return false;
      for(int ix=0; ix < id_.Count; ix++)
        if(!id_[ix].Equals(other.id_[ix])) return false;
      if (hasDenseinfo != other.hasDenseinfo || (hasDenseinfo && !denseinfo_.Equals(other.denseinfo_))) return false;
      if(lat_.Count != other.lat_.Count) return false;
      for(int ix=0; ix < lat_.Count; ix++)
        if(!lat_[ix].Equals(other.lat_[ix])) return false;
      if(lon_.Count != other.lon_.Count) return false;
      for(int ix=0; ix < lon_.Count; ix++)
        if(!lon_[ix].Equals(other.lon_[ix])) return false;
      if(keysVals_.Count != other.keysVals_.Count) return false;
      for(int ix=0; ix < keysVals_.Count; ix++)
        if(!keysVals_[ix].Equals(other.keysVals_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", id_, writer);
      PrintField("denseinfo", hasDenseinfo, denseinfo_, writer);
      PrintField("lat", lat_, writer);
      PrintField("lon", lon_, writer);
      PrintField("keys_vals", keysVals_, writer);
    }
    #endregion
    
    public static DenseNodes ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DenseNodes ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DenseNodes ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DenseNodes ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DenseNodes ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DenseNodes ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DenseNodes ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DenseNodes ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DenseNodes ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DenseNodes ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DenseNodes MakeReadOnly() {
      id_.MakeReadOnly();
      lat_.MakeReadOnly();
      lon_.MakeReadOnly();
      keysVals_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DenseNodes prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<DenseNodes, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DenseNodes cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DenseNodes result;
      
      private DenseNodes PrepareBuilder() {
        if (resultIsReadOnly) {
          DenseNodes original = result;
          result = new DenseNodes();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DenseNodes MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override DenseNodes DefaultInstanceForType {
        get { return global::OSMPBF.DenseNodes.DefaultInstance; }
      }
      
      public override DenseNodes BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is DenseNodes) {
          return MergeFrom((DenseNodes) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DenseNodes other) {
        if (other == global::OSMPBF.DenseNodes.DefaultInstance) return this;
        PrepareBuilder();
        if (other.id_.Count != 0) {
          result.id_.Add(other.id_);
        }
        if (other.HasDenseinfo) {
          MergeDenseinfo(other.Denseinfo);
        }
        if (other.lat_.Count != 0) {
          result.lat_.Add(other.lat_);
        }
        if (other.lon_.Count != 0) {
          result.lon_.Add(other.lon_);
        }
        if (other.keysVals_.Count != 0) {
          result.keysVals_.Add(other.keysVals_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_denseNodesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _denseNodesFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 8: {
              input.ReadSInt64Array(tag, field_name, result.id_);
              break;
            }
            case 42: {
              global::OSMPBF.DenseInfo.Builder subBuilder = global::OSMPBF.DenseInfo.CreateBuilder();
              if (result.hasDenseinfo) {
                subBuilder.MergeFrom(Denseinfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Denseinfo = subBuilder.BuildPartial();
              break;
            }
            case 66:
            case 64: {
              input.ReadSInt64Array(tag, field_name, result.lat_);
              break;
            }
            case 74:
            case 72: {
              input.ReadSInt64Array(tag, field_name, result.lon_);
              break;
            }
            case 82:
            case 80: {
              input.ReadInt32Array(tag, field_name, result.keysVals_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public pbc::IPopsicleList<long> IdList {
        get { return PrepareBuilder().id_; }
      }
      public int IdCount {
        get { return result.IdCount; }
      }
      public long GetId(int index) {
        return result.GetId(index);
      }
      public Builder SetId(int index, long value) {
        PrepareBuilder();
        result.id_[index] = value;
        return this;
      }
      public Builder AddId(long value) {
        PrepareBuilder();
        result.id_.Add(value);
        return this;
      }
      public Builder AddRangeId(scg::IEnumerable<long> values) {
        PrepareBuilder();
        result.id_.Add(values);
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.id_.Clear();
        return this;
      }
      
      public bool HasDenseinfo {
       get { return result.hasDenseinfo; }
      }
      public global::OSMPBF.DenseInfo Denseinfo {
        get { return result.Denseinfo; }
        set { SetDenseinfo(value); }
      }
      public Builder SetDenseinfo(global::OSMPBF.DenseInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDenseinfo = true;
        result.denseinfo_ = value;
        return this;
      }
      public Builder SetDenseinfo(global::OSMPBF.DenseInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDenseinfo = true;
        result.denseinfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDenseinfo(global::OSMPBF.DenseInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDenseinfo &&
            result.denseinfo_ != global::OSMPBF.DenseInfo.DefaultInstance) {
            result.denseinfo_ = global::OSMPBF.DenseInfo.CreateBuilder(result.denseinfo_).MergeFrom(value).BuildPartial();
        } else {
          result.denseinfo_ = value;
        }
        result.hasDenseinfo = true;
        return this;
      }
      public Builder ClearDenseinfo() {
        PrepareBuilder();
        result.hasDenseinfo = false;
        result.denseinfo_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<long> LatList {
        get { return PrepareBuilder().lat_; }
      }
      public int LatCount {
        get { return result.LatCount; }
      }
      public long GetLat(int index) {
        return result.GetLat(index);
      }
      public Builder SetLat(int index, long value) {
        PrepareBuilder();
        result.lat_[index] = value;
        return this;
      }
      public Builder AddLat(long value) {
        PrepareBuilder();
        result.lat_.Add(value);
        return this;
      }
      public Builder AddRangeLat(scg::IEnumerable<long> values) {
        PrepareBuilder();
        result.lat_.Add(values);
        return this;
      }
      public Builder ClearLat() {
        PrepareBuilder();
        result.lat_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<long> LonList {
        get { return PrepareBuilder().lon_; }
      }
      public int LonCount {
        get { return result.LonCount; }
      }
      public long GetLon(int index) {
        return result.GetLon(index);
      }
      public Builder SetLon(int index, long value) {
        PrepareBuilder();
        result.lon_[index] = value;
        return this;
      }
      public Builder AddLon(long value) {
        PrepareBuilder();
        result.lon_.Add(value);
        return this;
      }
      public Builder AddRangeLon(scg::IEnumerable<long> values) {
        PrepareBuilder();
        result.lon_.Add(values);
        return this;
      }
      public Builder ClearLon() {
        PrepareBuilder();
        result.lon_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> KeysValsList {
        get { return PrepareBuilder().keysVals_; }
      }
      public int KeysValsCount {
        get { return result.KeysValsCount; }
      }
      public int GetKeysVals(int index) {
        return result.GetKeysVals(index);
      }
      public Builder SetKeysVals(int index, int value) {
        PrepareBuilder();
        result.keysVals_[index] = value;
        return this;
      }
      public Builder AddKeysVals(int value) {
        PrepareBuilder();
        result.keysVals_.Add(value);
        return this;
      }
      public Builder AddRangeKeysVals(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.keysVals_.Add(values);
        return this;
      }
      public Builder ClearKeysVals() {
        PrepareBuilder();
        result.keysVals_.Clear();
        return this;
      }
    }
    static DenseNodes() {
      object.ReferenceEquals(global::OSMPBF.Osmformat.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Way : pb::GeneratedMessageLite<Way, Way.Builder> {
    private Way() { }
    private static readonly Way defaultInstance = new Way().MakeReadOnly();
    private static readonly string[] _wayFieldNames = new string[] { "id", "info", "keys", "refs", "vals" };
    private static readonly uint[] _wayFieldTags = new uint[] { 8, 34, 18, 66, 26 };
    public static Way DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Way DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Way ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private long id_;
    public bool HasId {
      get { return hasId; }
    }
    public long Id {
      get { return id_; }
    }
    
    public const int KeysFieldNumber = 2;
    private int keysMemoizedSerializedSize;
    private pbc::PopsicleList<uint> keys_ = new pbc::PopsicleList<uint>();
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> KeysList {
      get { return pbc::Lists.AsReadOnly(keys_); }
    }
    public int KeysCount {
      get { return keys_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetKeys(int index) {
      return keys_[index];
    }
    
    public const int ValsFieldNumber = 3;
    private int valsMemoizedSerializedSize;
    private pbc::PopsicleList<uint> vals_ = new pbc::PopsicleList<uint>();
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> ValsList {
      get { return pbc::Lists.AsReadOnly(vals_); }
    }
    public int ValsCount {
      get { return vals_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetVals(int index) {
      return vals_[index];
    }
    
    public const int InfoFieldNumber = 4;
    private bool hasInfo;
    private global::OSMPBF.Info info_;
    public bool HasInfo {
      get { return hasInfo; }
    }
    public global::OSMPBF.Info Info {
      get { return info_ ?? global::OSMPBF.Info.DefaultInstance; }
    }
    
    public const int RefsFieldNumber = 8;
    private int refsMemoizedSerializedSize;
    private pbc::PopsicleList<long> refs_ = new pbc::PopsicleList<long>();
    public scg::IList<long> RefsList {
      get { return pbc::Lists.AsReadOnly(refs_); }
    }
    public int RefsCount {
      get { return refs_.Count; }
    }
    public long GetRefs(int index) {
      return refs_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _wayFieldNames;
      if (hasId) {
        output.WriteInt64(1, field_names[0], Id);
      }
      if (keys_.Count > 0) {
        output.WritePackedUInt32Array(2, field_names[2], keysMemoizedSerializedSize, keys_);
      }
      if (vals_.Count > 0) {
        output.WritePackedUInt32Array(3, field_names[4], valsMemoizedSerializedSize, vals_);
      }
      if (hasInfo) {
        output.WriteMessage(4, field_names[1], Info);
      }
      if (refs_.Count > 0) {
        output.WritePackedSInt64Array(8, field_names[3], refsMemoizedSerializedSize, refs_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeInt64Size(1, Id);
        }
        {
          int dataSize = 0;
          foreach (uint element in KeysList) {
            dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
          }
          size += dataSize;
          if (keys_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          keysMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          foreach (uint element in ValsList) {
            dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
          }
          size += dataSize;
          if (vals_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          valsMemoizedSerializedSize = dataSize;
        }
        if (hasInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Info);
        }
        {
          int dataSize = 0;
          foreach (long element in RefsList) {
            dataSize += pb::CodedOutputStream.ComputeSInt64SizeNoTag(element);
          }
          size += dataSize;
          if (refs_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          refsMemoizedSerializedSize = dataSize;
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      foreach(uint i in keys_)
        hash ^= i.GetHashCode();
      foreach(uint i in vals_)
        hash ^= i.GetHashCode();
      if (hasInfo) hash ^= info_.GetHashCode();
      foreach(long i in refs_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      Way other = obj as Way;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if(keys_.Count != other.keys_.Count) return false;
      for(int ix=0; ix < keys_.Count; ix++)
        if(!keys_[ix].Equals(other.keys_[ix])) return false;
      if(vals_.Count != other.vals_.Count) return false;
      for(int ix=0; ix < vals_.Count; ix++)
        if(!vals_[ix].Equals(other.vals_[ix])) return false;
      if (hasInfo != other.hasInfo || (hasInfo && !info_.Equals(other.info_))) return false;
      if(refs_.Count != other.refs_.Count) return false;
      for(int ix=0; ix < refs_.Count; ix++)
        if(!refs_[ix].Equals(other.refs_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("keys", keys_, writer);
      PrintField("vals", vals_, writer);
      PrintField("info", hasInfo, info_, writer);
      PrintField("refs", refs_, writer);
    }
    #endregion
    
    public static Way ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Way ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Way ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Way ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Way ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Way ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Way ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Way ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Way ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Way ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Way MakeReadOnly() {
      keys_.MakeReadOnly();
      vals_.MakeReadOnly();
      refs_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Way prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<Way, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Way cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Way result;
      
      private Way PrepareBuilder() {
        if (resultIsReadOnly) {
          Way original = result;
          result = new Way();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Way MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override Way DefaultInstanceForType {
        get { return global::OSMPBF.Way.DefaultInstance; }
      }
      
      public override Way BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is Way) {
          return MergeFrom((Way) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Way other) {
        if (other == global::OSMPBF.Way.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.keys_.Count != 0) {
          result.keys_.Add(other.keys_);
        }
        if (other.vals_.Count != 0) {
          result.vals_.Add(other.vals_);
        }
        if (other.HasInfo) {
          MergeInfo(other.Info);
        }
        if (other.refs_.Count != 0) {
          result.refs_.Add(other.refs_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_wayFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _wayFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt64(ref result.id_);
              break;
            }
            case 18:
            case 16: {
              input.ReadUInt32Array(tag, field_name, result.keys_);
              break;
            }
            case 26:
            case 24: {
              input.ReadUInt32Array(tag, field_name, result.vals_);
              break;
            }
            case 34: {
              global::OSMPBF.Info.Builder subBuilder = global::OSMPBF.Info.CreateBuilder();
              if (result.hasInfo) {
                subBuilder.MergeFrom(Info);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Info = subBuilder.BuildPartial();
              break;
            }
            case 66:
            case 64: {
              input.ReadSInt64Array(tag, field_name, result.refs_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public long Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(long value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0L;
        return this;
      }
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> KeysList {
        get { return PrepareBuilder().keys_; }
      }
      public int KeysCount {
        get { return result.KeysCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetKeys(int index) {
        return result.GetKeys(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetKeys(int index, uint value) {
        PrepareBuilder();
        result.keys_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddKeys(uint value) {
        PrepareBuilder();
        result.keys_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeKeys(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.keys_.Add(values);
        return this;
      }
      public Builder ClearKeys() {
        PrepareBuilder();
        result.keys_.Clear();
        return this;
      }
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> ValsList {
        get { return PrepareBuilder().vals_; }
      }
      public int ValsCount {
        get { return result.ValsCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetVals(int index) {
        return result.GetVals(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetVals(int index, uint value) {
        PrepareBuilder();
        result.vals_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddVals(uint value) {
        PrepareBuilder();
        result.vals_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeVals(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.vals_.Add(values);
        return this;
      }
      public Builder ClearVals() {
        PrepareBuilder();
        result.vals_.Clear();
        return this;
      }
      
      public bool HasInfo {
       get { return result.hasInfo; }
      }
      public global::OSMPBF.Info Info {
        get { return result.Info; }
        set { SetInfo(value); }
      }
      public Builder SetInfo(global::OSMPBF.Info value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInfo = true;
        result.info_ = value;
        return this;
      }
      public Builder SetInfo(global::OSMPBF.Info.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasInfo = true;
        result.info_ = builderForValue.Build();
        return this;
      }
      public Builder MergeInfo(global::OSMPBF.Info value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasInfo &&
            result.info_ != global::OSMPBF.Info.DefaultInstance) {
            result.info_ = global::OSMPBF.Info.CreateBuilder(result.info_).MergeFrom(value).BuildPartial();
        } else {
          result.info_ = value;
        }
        result.hasInfo = true;
        return this;
      }
      public Builder ClearInfo() {
        PrepareBuilder();
        result.hasInfo = false;
        result.info_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<long> RefsList {
        get { return PrepareBuilder().refs_; }
      }
      public int RefsCount {
        get { return result.RefsCount; }
      }
      public long GetRefs(int index) {
        return result.GetRefs(index);
      }
      public Builder SetRefs(int index, long value) {
        PrepareBuilder();
        result.refs_[index] = value;
        return this;
      }
      public Builder AddRefs(long value) {
        PrepareBuilder();
        result.refs_.Add(value);
        return this;
      }
      public Builder AddRangeRefs(scg::IEnumerable<long> values) {
        PrepareBuilder();
        result.refs_.Add(values);
        return this;
      }
      public Builder ClearRefs() {
        PrepareBuilder();
        result.refs_.Clear();
        return this;
      }
    }
    static Way() {
      object.ReferenceEquals(global::OSMPBF.Osmformat.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Relation : pb::GeneratedMessageLite<Relation, Relation.Builder> {
    private Relation() { }
    private static readonly Relation defaultInstance = new Relation().MakeReadOnly();
    private static readonly string[] _relationFieldNames = new string[] { "id", "info", "keys", "memids", "roles_sid", "types", "vals" };
    private static readonly uint[] _relationFieldTags = new uint[] { 8, 34, 18, 74, 66, 82, 26 };
    public static Relation DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Relation DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Relation ThisMessage {
      get { return this; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum MemberType {
        NODE = 0,
        WAY = 1,
        RELATION = 2,
      }
      
    }
    #endregion
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private long id_;
    public bool HasId {
      get { return hasId; }
    }
    public long Id {
      get { return id_; }
    }
    
    public const int KeysFieldNumber = 2;
    private int keysMemoizedSerializedSize;
    private pbc::PopsicleList<uint> keys_ = new pbc::PopsicleList<uint>();
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> KeysList {
      get { return pbc::Lists.AsReadOnly(keys_); }
    }
    public int KeysCount {
      get { return keys_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetKeys(int index) {
      return keys_[index];
    }
    
    public const int ValsFieldNumber = 3;
    private int valsMemoizedSerializedSize;
    private pbc::PopsicleList<uint> vals_ = new pbc::PopsicleList<uint>();
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> ValsList {
      get { return pbc::Lists.AsReadOnly(vals_); }
    }
    public int ValsCount {
      get { return vals_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetVals(int index) {
      return vals_[index];
    }
    
    public const int InfoFieldNumber = 4;
    private bool hasInfo;
    private global::OSMPBF.Info info_;
    public bool HasInfo {
      get { return hasInfo; }
    }
    public global::OSMPBF.Info Info {
      get { return info_ ?? global::OSMPBF.Info.DefaultInstance; }
    }
    
    public const int RolesSidFieldNumber = 8;
    private int rolesSidMemoizedSerializedSize;
    private pbc::PopsicleList<int> rolesSid_ = new pbc::PopsicleList<int>();
    public scg::IList<int> RolesSidList {
      get { return pbc::Lists.AsReadOnly(rolesSid_); }
    }
    public int RolesSidCount {
      get { return rolesSid_.Count; }
    }
    public int GetRolesSid(int index) {
      return rolesSid_[index];
    }
    
    public const int MemidsFieldNumber = 9;
    private int memidsMemoizedSerializedSize;
    private pbc::PopsicleList<long> memids_ = new pbc::PopsicleList<long>();
    public scg::IList<long> MemidsList {
      get { return pbc::Lists.AsReadOnly(memids_); }
    }
    public int MemidsCount {
      get { return memids_.Count; }
    }
    public long GetMemids(int index) {
      return memids_[index];
    }
    
    public const int TypesFieldNumber = 10;
    private int typesMemoizedSerializedSize;
    private pbc::PopsicleList<global::OSMPBF.Relation.Types.MemberType> types_ = new pbc::PopsicleList<global::OSMPBF.Relation.Types.MemberType>();
    public scg::IList<global::OSMPBF.Relation.Types.MemberType> TypesList {
      get { return pbc::Lists.AsReadOnly(types_); }
    }
    public int TypesCount {
      get { return types_.Count; }
    }
    public global::OSMPBF.Relation.Types.MemberType GetTypes(int index) {
      return types_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _relationFieldNames;
      if (hasId) {
        output.WriteInt64(1, field_names[0], Id);
      }
      if (keys_.Count > 0) {
        output.WritePackedUInt32Array(2, field_names[2], keysMemoizedSerializedSize, keys_);
      }
      if (vals_.Count > 0) {
        output.WritePackedUInt32Array(3, field_names[6], valsMemoizedSerializedSize, vals_);
      }
      if (hasInfo) {
        output.WriteMessage(4, field_names[1], Info);
      }
      if (rolesSid_.Count > 0) {
        output.WritePackedInt32Array(8, field_names[4], rolesSidMemoizedSerializedSize, rolesSid_);
      }
      if (memids_.Count > 0) {
        output.WritePackedSInt64Array(9, field_names[3], memidsMemoizedSerializedSize, memids_);
      }
      if (types_.Count > 0) {
        output.WritePackedEnumArray(10, field_names[5], typesMemoizedSerializedSize, types_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeInt64Size(1, Id);
        }
        {
          int dataSize = 0;
          foreach (uint element in KeysList) {
            dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
          }
          size += dataSize;
          if (keys_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          keysMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          foreach (uint element in ValsList) {
            dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
          }
          size += dataSize;
          if (vals_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          valsMemoizedSerializedSize = dataSize;
        }
        if (hasInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Info);
        }
        {
          int dataSize = 0;
          foreach (int element in RolesSidList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          if (rolesSid_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          rolesSidMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          foreach (long element in MemidsList) {
            dataSize += pb::CodedOutputStream.ComputeSInt64SizeNoTag(element);
          }
          size += dataSize;
          if (memids_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          memidsMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          if (types_.Count > 0) {
            foreach (global::OSMPBF.Relation.Types.MemberType element in types_) {
              dataSize += pb::CodedOutputStream.ComputeEnumSizeNoTag((int) element);
            }
            size += dataSize;
            size += 1;
            size += pb::CodedOutputStream.ComputeRawVarint32Size((uint) dataSize);
          }
          typesMemoizedSerializedSize = dataSize;
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      foreach(uint i in keys_)
        hash ^= i.GetHashCode();
      foreach(uint i in vals_)
        hash ^= i.GetHashCode();
      if (hasInfo) hash ^= info_.GetHashCode();
      foreach(int i in rolesSid_)
        hash ^= i.GetHashCode();
      foreach(long i in memids_)
        hash ^= i.GetHashCode();
      foreach(global::OSMPBF.Relation.Types.MemberType i in types_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      Relation other = obj as Relation;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if(keys_.Count != other.keys_.Count) return false;
      for(int ix=0; ix < keys_.Count; ix++)
        if(!keys_[ix].Equals(other.keys_[ix])) return false;
      if(vals_.Count != other.vals_.Count) return false;
      for(int ix=0; ix < vals_.Count; ix++)
        if(!vals_[ix].Equals(other.vals_[ix])) return false;
      if (hasInfo != other.hasInfo || (hasInfo && !info_.Equals(other.info_))) return false;
      if(rolesSid_.Count != other.rolesSid_.Count) return false;
      for(int ix=0; ix < rolesSid_.Count; ix++)
        if(!rolesSid_[ix].Equals(other.rolesSid_[ix])) return false;
      if(memids_.Count != other.memids_.Count) return false;
      for(int ix=0; ix < memids_.Count; ix++)
        if(!memids_[ix].Equals(other.memids_[ix])) return false;
      if(types_.Count != other.types_.Count) return false;
      for(int ix=0; ix < types_.Count; ix++)
        if(!types_[ix].Equals(other.types_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("keys", keys_, writer);
      PrintField("vals", vals_, writer);
      PrintField("info", hasInfo, info_, writer);
      PrintField("roles_sid", rolesSid_, writer);
      PrintField("memids", memids_, writer);
      PrintField("types", types_, writer);
    }
    #endregion
    
    public static Relation ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Relation ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Relation ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Relation ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Relation ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Relation ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Relation ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Relation ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Relation ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Relation ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Relation MakeReadOnly() {
      keys_.MakeReadOnly();
      vals_.MakeReadOnly();
      rolesSid_.MakeReadOnly();
      memids_.MakeReadOnly();
      types_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Relation prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<Relation, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Relation cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Relation result;
      
      private Relation PrepareBuilder() {
        if (resultIsReadOnly) {
          Relation original = result;
          result = new Relation();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Relation MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override Relation DefaultInstanceForType {
        get { return global::OSMPBF.Relation.DefaultInstance; }
      }
      
      public override Relation BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is Relation) {
          return MergeFrom((Relation) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Relation other) {
        if (other == global::OSMPBF.Relation.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.keys_.Count != 0) {
          result.keys_.Add(other.keys_);
        }
        if (other.vals_.Count != 0) {
          result.vals_.Add(other.vals_);
        }
        if (other.HasInfo) {
          MergeInfo(other.Info);
        }
        if (other.rolesSid_.Count != 0) {
          result.rolesSid_.Add(other.rolesSid_);
        }
        if (other.memids_.Count != 0) {
          result.memids_.Add(other.memids_);
        }
        if (other.types_.Count != 0) {
          result.types_.Add(other.types_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_relationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _relationFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt64(ref result.id_);
              break;
            }
            case 18:
            case 16: {
              input.ReadUInt32Array(tag, field_name, result.keys_);
              break;
            }
            case 26:
            case 24: {
              input.ReadUInt32Array(tag, field_name, result.vals_);
              break;
            }
            case 34: {
              global::OSMPBF.Info.Builder subBuilder = global::OSMPBF.Info.CreateBuilder();
              if (result.hasInfo) {
                subBuilder.MergeFrom(Info);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Info = subBuilder.BuildPartial();
              break;
            }
            case 66:
            case 64: {
              input.ReadInt32Array(tag, field_name, result.rolesSid_);
              break;
            }
            case 74:
            case 72: {
              input.ReadSInt64Array(tag, field_name, result.memids_);
              break;
            }
            case 82:
            case 80: {
              scg::ICollection<object> unknownItems;
              input.ReadEnumArray<global::OSMPBF.Relation.Types.MemberType>(tag, field_name, result.types_, out unknownItems);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public long Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(long value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0L;
        return this;
      }
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> KeysList {
        get { return PrepareBuilder().keys_; }
      }
      public int KeysCount {
        get { return result.KeysCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetKeys(int index) {
        return result.GetKeys(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetKeys(int index, uint value) {
        PrepareBuilder();
        result.keys_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddKeys(uint value) {
        PrepareBuilder();
        result.keys_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeKeys(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.keys_.Add(values);
        return this;
      }
      public Builder ClearKeys() {
        PrepareBuilder();
        result.keys_.Clear();
        return this;
      }
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> ValsList {
        get { return PrepareBuilder().vals_; }
      }
      public int ValsCount {
        get { return result.ValsCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetVals(int index) {
        return result.GetVals(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetVals(int index, uint value) {
        PrepareBuilder();
        result.vals_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddVals(uint value) {
        PrepareBuilder();
        result.vals_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeVals(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.vals_.Add(values);
        return this;
      }
      public Builder ClearVals() {
        PrepareBuilder();
        result.vals_.Clear();
        return this;
      }
      
      public bool HasInfo {
       get { return result.hasInfo; }
      }
      public global::OSMPBF.Info Info {
        get { return result.Info; }
        set { SetInfo(value); }
      }
      public Builder SetInfo(global::OSMPBF.Info value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInfo = true;
        result.info_ = value;
        return this;
      }
      public Builder SetInfo(global::OSMPBF.Info.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasInfo = true;
        result.info_ = builderForValue.Build();
        return this;
      }
      public Builder MergeInfo(global::OSMPBF.Info value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasInfo &&
            result.info_ != global::OSMPBF.Info.DefaultInstance) {
            result.info_ = global::OSMPBF.Info.CreateBuilder(result.info_).MergeFrom(value).BuildPartial();
        } else {
          result.info_ = value;
        }
        result.hasInfo = true;
        return this;
      }
      public Builder ClearInfo() {
        PrepareBuilder();
        result.hasInfo = false;
        result.info_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<int> RolesSidList {
        get { return PrepareBuilder().rolesSid_; }
      }
      public int RolesSidCount {
        get { return result.RolesSidCount; }
      }
      public int GetRolesSid(int index) {
        return result.GetRolesSid(index);
      }
      public Builder SetRolesSid(int index, int value) {
        PrepareBuilder();
        result.rolesSid_[index] = value;
        return this;
      }
      public Builder AddRolesSid(int value) {
        PrepareBuilder();
        result.rolesSid_.Add(value);
        return this;
      }
      public Builder AddRangeRolesSid(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.rolesSid_.Add(values);
        return this;
      }
      public Builder ClearRolesSid() {
        PrepareBuilder();
        result.rolesSid_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<long> MemidsList {
        get { return PrepareBuilder().memids_; }
      }
      public int MemidsCount {
        get { return result.MemidsCount; }
      }
      public long GetMemids(int index) {
        return result.GetMemids(index);
      }
      public Builder SetMemids(int index, long value) {
        PrepareBuilder();
        result.memids_[index] = value;
        return this;
      }
      public Builder AddMemids(long value) {
        PrepareBuilder();
        result.memids_.Add(value);
        return this;
      }
      public Builder AddRangeMemids(scg::IEnumerable<long> values) {
        PrepareBuilder();
        result.memids_.Add(values);
        return this;
      }
      public Builder ClearMemids() {
        PrepareBuilder();
        result.memids_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::OSMPBF.Relation.Types.MemberType> TypesList {
        get { return PrepareBuilder().types_; }
      }
      public int TypesCount {
        get { return result.TypesCount; }
      }
      public global::OSMPBF.Relation.Types.MemberType GetTypes(int index) {
        return result.GetTypes(index);
      }
      public Builder SetTypes(int index, global::OSMPBF.Relation.Types.MemberType value) {
        PrepareBuilder();
        result.types_[index] = value;
        return this;
      }
      public Builder AddTypes(global::OSMPBF.Relation.Types.MemberType value) {
        PrepareBuilder();
        result.types_.Add(value);
        return this;
      }
      public Builder AddRangeTypes(scg::IEnumerable<global::OSMPBF.Relation.Types.MemberType> values) {
        PrepareBuilder();
        result.types_.Add(values);
        return this;
      }
      public Builder ClearTypes() {
        PrepareBuilder();
        result.types_.Clear();
        return this;
      }
    }
    static Relation() {
      object.ReferenceEquals(global::OSMPBF.Osmformat.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
